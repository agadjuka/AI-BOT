#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ OpenCV –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –∏ –æ–±–ª–∞—á–Ω–æ–π –≤–µ—Ä—Å–∏–π
"""
import os
import sys
import time
import psutil

def get_memory_usage():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ MB"""
    process = psutil.Process(os.getpid())
    return process.memory_info().rss / 1024 / 1024

def test_opencv_availability():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å OpenCV –≤ –æ–±–µ–∏—Ö –≤–µ—Ä—Å–∏—è—Ö"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ OpenCV...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å OpenCV
    try:
        from utils.opencv_lazy_loader import check_opencv_availability
        opencv_available = check_opencv_availability()
        print(f"‚úÖ OpenCV –¥–æ—Å—Ç—É–ø–µ–Ω: {opencv_available}")
        return opencv_available
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ OpenCV: {e}")
        return False

def test_lazy_loading():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–µ–Ω–∏–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É OpenCV"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏...")
    
    memory_before = get_memory_usage()
    print(f"üìä –ü–∞–º—è—Ç—å –¥–æ –∏–º–ø–æ—Ä—Ç–∞: {memory_before:.2f} MB")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ OpenCV
    from utils.opencv_lazy_loader import get_opencv, unload_opencv, OpenCVContext
    from utils.receipt_analyzer_optimized import analyze_receipt_and_choose_model
    
    memory_after_import = get_memory_usage()
    print(f"üìä –ü–∞–º—è—Ç—å –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞: {memory_after_import:.2f} MB")
    print(f"üìà –ü—Ä–∏—Ä–æ—Å—Ç –ø–∞–º—è—Ç–∏: {memory_after_import - memory_before:.2f} MB")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–µ–Ω–∏–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–µ–Ω–∏–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É OpenCV...")
    memory_before_cv2 = get_memory_usage()
    
    cv2 = get_opencv()
    memory_after_cv2 = get_memory_usage()
    print(f"üìä –ü–∞–º—è—Ç—å –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ OpenCV: {memory_after_cv2:.2f} MB")
    print(f"üìà –ü—Ä–∏—Ä–æ—Å—Ç –ø–∞–º—è—Ç–∏ OpenCV: {memory_after_cv2 - memory_before_cv2:.2f} MB")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–≥—Ä—É–∑–∫—É
    print("üßπ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–≥—Ä—É–∑–∫—É OpenCV...")
    unload_opencv()
    memory_after_unload = get_memory_usage()
    print(f"üìä –ü–∞–º—è—Ç—å –ø–æ—Å–ª–µ –≤—ã–≥—Ä—É–∑–∫–∏: {memory_after_unload:.2f} MB")
    print(f"üìâ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –ø–∞–º—è—Ç–∏: {memory_after_cv2 - memory_after_unload:.2f} MB")
    
    return True

def test_analyze_function():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    import numpy as np
    from PIL import Image, ImageDraw, ImageFont
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    img = Image.new('RGB', (800, 600), color='white')
    draw = ImageDraw.Draw(img)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    try:
        font = ImageFont.truetype("arial.ttf", 20)
    except:
        font = ImageFont.load_default()
    
    draw.text((50, 50), "Test Receipt", fill='black', font=font)
    draw.text((50, 100), "Item 1: $10.00", fill='black', font=font)
    draw.text((50, 150), "Item 2: $15.50", fill='black', font=font)
    draw.text((50, 200), "Total: $25.50", fill='black', font=font)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –±–∞–π—Ç—ã
    import io
    img_bytes = io.BytesIO()
    img.save(img_bytes, format='JPEG')
    image_bytes = img_bytes.getvalue()
    
    print(f"üì∑ –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {len(image_bytes)} –±–∞–π—Ç")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑
    memory_before = get_memory_usage()
    print(f"üìä –ü–∞–º—è—Ç—å –¥–æ –∞–Ω–∞–ª–∏–∑–∞: {memory_before:.2f} MB")
    
    try:
        import asyncio
        from utils.receipt_analyzer_optimized import analyze_receipt_and_choose_model
        result = asyncio.run(analyze_receipt_and_choose_model(image_bytes))
        print(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: {result}")
        
        memory_after = get_memory_usage()
        print(f"üìä –ü–∞–º—è—Ç—å –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞: {memory_after:.2f} MB")
        print(f"üìà –ü—Ä–∏—Ä–æ—Å—Ç –ø–∞–º—è—Ç–∏: {memory_after - memory_before:.2f} MB")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        return False

def test_environment_detection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—ã (–ª–æ–∫–∞–ª—å–Ω–∞—è/–æ–±–ª–∞—á–Ω–∞—è)"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ä–µ–¥—ã...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    is_cloud = bool(os.getenv('GOOGLE_APPLICATION_CREDENTIALS_JSON'))
    is_local = bool(os.getenv('GOOGLE_APPLICATION_CREDENTIALS'))
    
    print(f"üåê –û–±–ª–∞—á–Ω–∞—è —Å—Ä–µ–¥–∞: {is_cloud}")
    print(f"üíª –õ–æ–∫–∞–ª—å–Ω–∞—è —Å—Ä–µ–¥–∞: {is_local}")
    
    if is_cloud:
        print("‚òÅÔ∏è –†–∞–±–æ—Ç–∞–µ–º –≤ –æ–±–ª–∞—á–Ω–æ–π —Å—Ä–µ–¥–µ (Cloud Run)")
    elif is_local:
        print("üíª –†–∞–±–æ—Ç–∞–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥–µ")
    else:
        print("‚ùì –°—Ä–µ–¥–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
    
    return True

def test_main_files():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç main —Ñ–∞–π–ª—ã"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ main —Ñ–∞–π–ª–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º main.py (–æ–±–ª–∞—á–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    try:
        with open('main.py', 'r', encoding='utf-8') as f:
            main_cloud_content = f.read()
        
        if 'check_opencv_availability' in main_cloud_content:
            print("‚úÖ main.py (–æ–±–ª–∞—á–Ω–∞—è –≤–µ—Ä—Å–∏—è) —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫—É OpenCV")
        else:
            print("‚ùå main.py (–æ–±–ª–∞—á–Ω–∞—è –≤–µ—Ä—Å–∏—è) –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫—É OpenCV")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è main.py: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º main_local.py (–ª–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    try:
        with open('main_local.py', 'r', encoding='utf-8') as f:
            main_local_content = f.read()
        
        if 'check_opencv_availability' in main_local_content:
            print("‚úÖ main_local.py (–ª–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è) —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫—É OpenCV")
        else:
            print("‚ùå main_local.py (–ª–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è) –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫—É OpenCV")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è main_local.py: {e}")
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ OpenCV –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –∏ –æ–±–ª–∞—á–Ω–æ–π –≤–µ—Ä—Å–∏–π...")
    
    try:
        # –¢–µ—Å—Ç 1: –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å OpenCV
        opencv_available = test_opencv_availability()
        if not opencv_available:
            print("‚ùå OpenCV –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ç–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω")
            return
        
        # –¢–µ—Å—Ç 2: –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
        test_lazy_loading()
        
        # –¢–µ—Å—Ç 3: –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
        test_analyze_function()
        
        # –¢–µ—Å—Ç 4: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—ã
        test_environment_detection()
        
        # –¢–µ—Å—Ç 5: Main —Ñ–∞–π–ª—ã
        test_main_files()
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("\nüí° –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print("   ‚úÖ OpenCV –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ–±–µ–∏—Ö –≤–µ—Ä—Å–∏–π")
        print("   ‚úÖ –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("   ‚úÖ –ü–∞–º—è—Ç—å –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
        print("   ‚úÖ main.py –∏ main_local.py –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        print("   ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å Gemini –Ω–µ —Å—Ç—Ä–∞–¥–∞–µ—Ç")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
