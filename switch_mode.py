#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –ª–æ–∫–∞–ª—å–Ω–æ–π –∏ production –≤–µ—Ä—Å–∏—è–º–∏
"""
import os
import sys
import shutil
from pathlib import Path

def show_help():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
    print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤ AI Bot")
    print("=" * 40)
    print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
    print("  python switch_mode.py local    - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é")
    print("  python switch_mode.py prod     - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ production –≤–µ—Ä—Å–∏—é")
    print("  python switch_mode.py status   - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º")
    print()

def get_current_mode():
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º"""
    main_file = Path("main.py")
    main_local_file = Path("main_local.py")
    
    if not main_file.exists():
        return "unknown"
    
    # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ main.py –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
    with open(main_file, 'r', encoding='utf-8') as f:
        first_lines = f.read(200)
    
    if "FastAPI" in first_lines and "webhook" in first_lines:
        return "production"
    elif "polling" in first_lines and "LOCAL" in first_lines:
        return "local"
    else:
        return "unknown"

def switch_to_local():
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é"""
    print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
    if not Path("main_local.py").exists():
        print("‚ùå –§–∞–π–ª main_local.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–≥–æ main.py
    if Path("main.py").exists():
        shutil.copy("main.py", "main_production_backup.py")
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è main.py")
    
    # –ö–æ–ø–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –≤ main.py
    shutil.copy("main_local.py", "main.py")
    print("‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
    if not Path(".env").exists():
        print("‚ö†Ô∏è –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python dev_setup.py")
    
    return True

def switch_to_production():
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ production –≤–µ—Ä—Å–∏—é"""
    print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ production –≤–µ—Ä—Å–∏—é...")
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    if Path("main_production_backup.py").exists():
        shutil.copy("main_production_backup.py", "main.py")
        print("‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ production –≤–µ—Ä—Å–∏—é")
        return True
    
    # –ï—Å–ª–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º git
    try:
        import subprocess
        result = subprocess.run([
            "git", "show", "HEAD:main.py"
        ], capture_output=True, text=True, check=True)
        
        with open("main.py", 'w', encoding='utf-8') as f:
            f.write(result.stdout)
        
        print("‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ production –≤–µ—Ä—Å–∏—è –∏–∑ git")
        return True
        
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å production –≤–µ—Ä—Å–∏—é: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ main.py –≤ git —Å–æ–¥–µ—Ä–∂–∏—Ç production –≤–µ—Ä—Å–∏—é")
        return False

def show_status():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å"""
    mode = get_current_mode()
    
    print("üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:")
    print(f"  –†–µ–∂–∏–º: {mode}")
    
    if mode == "local":
        print("  ‚úÖ –ì–æ—Ç–æ–≤ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
        print("  üí° –ó–∞–ø—É—Å–∫: python run_local.py")
    elif mode == "production":
        print("  ‚úÖ –ì–æ—Ç–æ–≤ –¥–ª—è production –¥–µ–ø–ª–æ—è")
        print("  üí° –ó–∞–ø—É—Å–∫: python main.py")
    else:
        print("  ‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
    files_status = {
        "main.py": Path("main.py").exists(),
        "main_local.py": Path("main_local.py").exists(),
        ".env": Path(".env").exists(),
        "requirements_local.txt": Path("requirements_local.txt").exists(),
    }
    
    print("\nüìÅ –§–∞–π–ª—ã:")
    for file, exists in files_status.items():
        status = "‚úÖ" if exists else "‚ùå"
        print(f"  {status} {file}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        show_help()
        return
    
    command = sys.argv[1].lower()
    
    if command == "local":
        switch_to_local()
    elif command == "prod":
        switch_to_production()
    elif command == "status":
        show_status()
    elif command in ["help", "-h", "--help"]:
        show_help()
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        show_help()

if __name__ == "__main__":
    main()
