"""
Main entry point for the AI Bot application with webhook support for Cloud Run
Using FastAPI for better performance and modern async support
"""
import os
import asyncio
from typing import Optional
from contextlib import asynccontextmanager
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse
import httpx
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
)
from telegram.error import Conflict, NetworkError
from config.locales.locale_manager import initialize_locale_manager

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Firestore
# –≠—Ç–æ—Ç –∫–æ–¥ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ Cloud Run
# –∏ –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è.
from google.cloud import firestore

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Firestore —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
# –í Cloud Run –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Application Default Credentials (ADC)
db = None
try:
    # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Firestore
    db = firestore.Client(database='billscaner')
    print("‚úÖ Firestore –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ (–±–∞–∑–∞: billscaner)")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firestore: {e}")
    print("üí° –í Cloud Run –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Application Default Credentials (ADC)")
    print("üí° Firestore –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –±–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–æ–≤")
    db = None

# –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LocaleManager –°–†–ê–ó–£ –ø–æ—Å–ª–µ Firestore
# –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –î–û –∏–º–ø–æ—Ä—Ç–∞ handlers, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å race condition
from config.locales.locale_manager import initialize_locale_manager
initialize_locale_manager(db)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å numpy/pandas –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
try:
    import numpy as np
    import pandas as pd
    print(f"‚úÖ numpy –≤–µ—Ä—Å–∏—è: {np.__version__}")
    print(f"‚úÖ pandas –≤–µ—Ä—Å–∏—è: {pd.__version__}")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ numpy/pandas: {e}")
    # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–ø—É—Å–∫, –µ—Å–ª–∏ numpy/pandas –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
    np = None
    pd = None

# –ò–º–ø–æ—Ä—Ç—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    from config.settings import BotConfig
    from config.prompts import PromptManager
    from services.ai_service import AIService, ReceiptAnalysisServiceCompat
    from handlers.message_handlers import MessageHandlers
    from handlers.callback_handlers import CallbackHandlers
    from utils.ingredient_storage import IngredientStorage
    from utils.message_sender import MessageSender
    from google_sheets_handler import get_google_sheets_ingredients
    print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º None –¥–ª—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
    BotConfig = None
    PromptManager = None
    AIService = None
    ReceiptAnalysisServiceCompat = None
    MessageHandlers = None
    CallbackHandlers = None
    IngredientStorage = None
    MessageSender = None
    get_google_sheets_ingredients = None

# Bot configuration - –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ–∑–∂–µ
TOKEN = None
TELEGRAM_API = None

# Global variables for keep-alive task
keep_alive_task_obj: Optional[asyncio.Task] = None

def get_service_url():
    """–ü–æ–ª—É—á–∞–µ—Ç URL —Å–µ—Ä–≤–∏—Å–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Cloud Run"""
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º SERVICE_URL (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é)
    service_url = os.getenv("SERVICE_URL")
    if service_url:
        return service_url
    
    # –ï—Å–ª–∏ SERVICE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–π URL Cloud Run
    return "https://ai-bot-apmtihe4ga-as.a.run.app"

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Lifespan manager –¥–ª—è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ö–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    # –ü–æ–ª—É—á–∞–µ–º URL —Å–µ—Ä–≤–∏—Å–∞
    service_url = get_service_url()
    if service_url:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∑—è—Ç –ª–∏ URL –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if os.getenv("SERVICE_URL"):
            print(f"üíì Starting keep-alive ping to {service_url} (–∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π SERVICE_URL)")
        else:
            print(f"üíì Starting keep-alive ping to {service_url} (URL –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
        global keep_alive_task_obj
        keep_alive_task_obj = asyncio.create_task(keep_alive_ping(service_url))
    else:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å URL —Å–µ—Ä–≤–∏—Å–∞ - keep-alive –æ—Ç–∫–ª—é—á–µ–Ω")
    
    yield
    
    # –ö–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏
    if keep_alive_task_obj and not keep_alive_task_obj.done():
        keep_alive_task_obj.cancel()
        print("üíì Keep-alive task cancelled.")

# FastAPI app
app = FastAPI(title="AI Bot", description="Telegram Bot for receipt processing", lifespan=lifespan)

# Global variables
application: Optional[Application] = None
ingredient_storage: Optional[IngredientStorage] = None
locale_manager_cache: Optional[object] = None

async def cleanup_old_files_periodically(ingredient_storage: IngredientStorage) -> None:
    """Async background task to clean up old files every 30 minutes"""
    while True:
        try:
            await asyncio.sleep(1800)  # 30 minutes = 1800 seconds
            ingredient_storage.cleanup_old_files()
            print("üßπ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è")
        except asyncio.CancelledError:
            print("üßπ –ó–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–∞–π–ª–æ–≤: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π

async def keep_alive_ping(service_url: str) -> None:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ keep-alive –ø–∏–Ω–≥–æ–≤ –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π URL"""
    print(f"üíì Keep-alive ping –∑–∞–ø—É—â–µ–Ω –¥–ª—è {service_url}")
    
    while True:
        try:
            await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç = 300 —Å–µ–∫—É–Ω–¥
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTTP-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π URL
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.get(f"{service_url}/health")
                if response.status_code == 200:
                    print("üíì Keep-alive ping sent successfully.")
                else:
                    print(f"‚ö†Ô∏è Keep-alive ping –ø–æ–ª—É—á–∏–ª —Å—Ç–∞—Ç—É—Å {response.status_code}")
                    
        except asyncio.CancelledError:
            print("üíì Keep-alive ping –∑–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            break
        except Exception as e:
            print(f"‚ùå Keep-alive ping failed: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π

async def start_keep_alive_task():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç keep-alive –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ URL —Å–µ—Ä–≤–∏—Å–∞ –¥–æ—Å—Ç—É–ø–µ–Ω"""
    global keep_alive_task_obj
    
    # –ü–æ–ª—É—á–∞–µ–º URL —Å–µ—Ä–≤–∏—Å–∞
    service_url = get_service_url()
    if not service_url:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å URL —Å–µ—Ä–≤–∏—Å–∞ - keep-alive –æ—Ç–∫–ª—é—á–µ–Ω")
        return
    
    if keep_alive_task_obj is None or keep_alive_task_obj.done():
        keep_alive_task_obj = asyncio.create_task(keep_alive_ping(service_url))
        print(f"‚úÖ Keep-alive –∑–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è {service_url}")

def get_cached_locale_manager():
    """–ü–æ–ª—É—á–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π LocaleManager –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    global locale_manager_cache
    
    if locale_manager_cache is None:
        try:
            from config.locales.locale_manager import get_global_locale_manager
            locale_manager_cache = get_global_locale_manager()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è LocaleManager: {e}")
            return None
    
    return locale_manager_cache

def create_application() -> Application:
    """Create and configure the Telegram application"""
    # Check if all required modules are available
    if not all([BotConfig, PromptManager, AIService, ReceiptAnalysisServiceCompat, 
                MessageHandlers, CallbackHandlers, IngredientStorage]):
        raise ImportError("Required modules are not available")
    
    # Check if TOKEN is available
    if not TOKEN:
        raise ValueError("BOT_TOKEN is not set")
    
    # Initialize configuration
    config = BotConfig()
    prompt_manager = PromptManager()
    
    # Initialize services
    ai_service = AIService(config, prompt_manager)
    analysis_service = ReceiptAnalysisServiceCompat(ai_service)
    
    # LocaleManager —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ —Å Firestore instance
    
    # Initialize handlers AFTER LocaleManager is initialized
    message_handlers = MessageHandlers(config, analysis_service)
    callback_handlers = CallbackHandlers(config, analysis_service)
    
    # Initialize ingredient storage with 1 hour cleanup
    ingredient_storage = IngredientStorage(max_age_hours=1)
    
    # Create application
    application = Application.builder().token(TOKEN).concurrent_updates(True).build()
    
    
    # Initialize empty Google Sheets ingredients - will be loaded on demand
    application.bot_data["google_sheets_ingredients"] = {}
    print("‚úÖ Google Sheets –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é")
    
    # Preload GoogleSheetsManager to initialize Firestore connection
    from services.google_sheets_manager import get_google_sheets_manager
    sheets_manager = get_google_sheets_manager(db)
    print("‚úÖ GoogleSheetsManager –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω —Å Firestore")
    
    # Preload IngredientsManager to initialize Firestore connection
    from services.ingredients_manager import get_ingredients_manager
    ingredients_manager = get_ingredients_manager(db)
    print("‚úÖ IngredientsManager –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω —Å Firestore")
    
    # Preload GoogleSheetsService to initialize Google Sheets API
    from services.google_sheets_service import GoogleSheetsService
    google_sheets_service = GoogleSheetsService(
        credentials_path=config.GOOGLE_SHEETS_CREDENTIALS,
        spreadsheet_id=config.GOOGLE_SHEETS_SPREADSHEET_ID
    )
    print("‚úÖ GoogleSheetsService –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω")
    
    # Debug Google Sheets configuration
    print(f"üîç Google Sheets configuration:")
    print(f"  - Credentials path: {config.GOOGLE_SHEETS_CREDENTIALS}")
    print(f"  - Spreadsheet ID: {config.GOOGLE_SHEETS_SPREADSHEET_ID}")
    print(f"  - Service available: {google_sheets_service.is_available()}")
    print(f"  - GOOGLE_APPLICATION_CREDENTIALS_JSON set: {bool(os.getenv('GOOGLE_APPLICATION_CREDENTIALS_JSON'))}")

    # Create conversation handler
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", message_handlers.start),
            CommandHandler("reset_language", message_handlers.reset_language),
            CommandHandler("dashboard", message_handlers.dashboard),
            MessageHandler(filters.PHOTO, message_handlers.handle_photo)
        ],
        states={
            config.AWAITING_CORRECTION: [
                CallbackQueryHandler(callback_handlers.handle_callback_query),
                CallbackQueryHandler(callback_handlers.handle_correction_choice),
                CommandHandler("dashboard", message_handlers.dashboard),
                MessageHandler(filters.TEXT & ~filters.COMMAND, message_handlers.handle_user_input),
                MessageHandler(filters.PHOTO, message_handlers.handle_photo)
            ],
            config.AWAITING_DASHBOARD: [
                CallbackQueryHandler(callback_handlers.handle_callback_query),
                CallbackQueryHandler(callback_handlers.handle_correction_choice),
                CommandHandler("dashboard", message_handlers.dashboard),
                MessageHandler(filters.TEXT & ~filters.COMMAND, message_handlers.handle_user_input),
                MessageHandler(filters.PHOTO, message_handlers.handle_photo)
            ],
            config.AWAITING_INPUT: [
                CallbackQueryHandler(callback_handlers.handle_callback_query),
                CallbackQueryHandler(callback_handlers.handle_correction_choice),
                CommandHandler("dashboard", message_handlers.dashboard),
                MessageHandler(filters.TEXT & ~filters.COMMAND, message_handlers.handle_user_input),
                MessageHandler(filters.PHOTO, message_handlers.handle_photo)
            ],
            config.AWAITING_LINE_NUMBER: [
                CallbackQueryHandler(callback_handlers.handle_callback_query),
                CallbackQueryHandler(callback_handlers.handle_correction_choice),
                CommandHandler("dashboard", message_handlers.dashboard),
                MessageHandler(filters.TEXT & ~filters.COMMAND, message_handlers.handle_line_number_input),
                MessageHandler(filters.PHOTO, message_handlers.handle_photo)
            ],
            config.AWAITING_FIELD_EDIT: [
                CallbackQueryHandler(callback_handlers.handle_callback_query),
                CallbackQueryHandler(callback_handlers.handle_correction_choice), 
                CommandHandler("dashboard", message_handlers.dashboard),
                MessageHandler(filters.TEXT & ~filters.COMMAND, message_handlers.handle_user_input),
                MessageHandler(filters.PHOTO, message_handlers.handle_photo)
            ],
            config.AWAITING_DELETE_LINE_NUMBER: [
                CallbackQueryHandler(callback_handlers.handle_callback_query),
                CallbackQueryHandler(callback_handlers.handle_correction_choice),
                CommandHandler("dashboard", message_handlers.dashboard),
                MessageHandler(filters.TEXT & ~filters.COMMAND, message_handlers.handle_delete_line_number_input),
                MessageHandler(filters.PHOTO, message_handlers.handle_photo)
            ],
            config.AWAITING_TOTAL_EDIT: [
                CommandHandler("dashboard", message_handlers.dashboard),
                MessageHandler(filters.TEXT & ~filters.COMMAND, message_handlers.handle_total_edit_input),
                MessageHandler(filters.PHOTO, message_handlers.handle_photo)
            ],
            config.AWAITING_INGREDIENT_MATCHING: [
                CallbackQueryHandler(callback_handlers.handle_correction_choice),
                CommandHandler("dashboard", message_handlers.dashboard),
                MessageHandler(filters.PHOTO, message_handlers.handle_photo)
            ],
            config.AWAITING_MANUAL_MATCH: [
                CommandHandler("dashboard", message_handlers.dashboard),
                MessageHandler(filters.TEXT & ~filters.COMMAND, message_handlers.handle_ingredient_matching_input),
                CallbackQueryHandler(callback_handlers.handle_correction_choice),
                MessageHandler(filters.PHOTO, message_handlers.handle_photo)
            ],
            config.AWAITING_SHEET_URL: [
                CallbackQueryHandler(callback_handlers.handle_callback_query),
                CallbackQueryHandler(callback_handlers.handle_correction_choice),
                CommandHandler("dashboard", message_handlers.dashboard),
                MessageHandler(filters.TEXT & ~filters.COMMAND, callback_handlers._handle_sheet_url_input),
                MessageHandler(filters.PHOTO, message_handlers.handle_photo)
            ],
            config.AWAITING_SHEET_NAME: [
                CallbackQueryHandler(callback_handlers.handle_callback_query),
                CallbackQueryHandler(callback_handlers.handle_correction_choice),
                CommandHandler("dashboard", message_handlers.dashboard),
                MessageHandler(filters.TEXT & ~filters.COMMAND, callback_handlers._handle_sheet_name_input),
                MessageHandler(filters.PHOTO, message_handlers.handle_photo)
            ],
            config.AWAITING_CONFIRM_MAPPING: [
                CallbackQueryHandler(callback_handlers.handle_callback_query),
                CallbackQueryHandler(callback_handlers.handle_correction_choice),
                CommandHandler("dashboard", message_handlers.dashboard),
                MessageHandler(filters.PHOTO, message_handlers.handle_photo)
            ],
            config.EDIT_MAPPING: [
                CallbackQueryHandler(callback_handlers.handle_callback_query),
                CallbackQueryHandler(callback_handlers.handle_correction_choice),
                CommandHandler("dashboard", message_handlers.dashboard),
                MessageHandler(filters.TEXT & ~filters.COMMAND, message_handlers.handle_column_input),
                MessageHandler(filters.PHOTO, message_handlers.handle_photo)
            ],
            config.AWAITING_COLUMN_INPUT: [
                CallbackQueryHandler(callback_handlers.handle_callback_query),
                CallbackQueryHandler(callback_handlers.handle_correction_choice),
                CommandHandler("dashboard", message_handlers.dashboard),
                MessageHandler(filters.TEXT & ~filters.COMMAND, message_handlers.handle_column_input),
                MessageHandler(filters.PHOTO, message_handlers.handle_photo)
            ],
            config.AWAITING_SHEET_NAME_INPUT: [
                CallbackQueryHandler(callback_handlers.handle_callback_query),
                CallbackQueryHandler(callback_handlers.handle_correction_choice),
                CommandHandler("dashboard", message_handlers.dashboard),
                MessageHandler(filters.TEXT & ~filters.COMMAND, message_handlers.handle_sheet_name_input),
                MessageHandler(filters.PHOTO, message_handlers.handle_photo)
            ],
            config.AWAITING_START_ROW_INPUT: [
                CallbackQueryHandler(callback_handlers.handle_callback_query),
                CallbackQueryHandler(callback_handlers.handle_correction_choice),
                CommandHandler("dashboard", message_handlers.dashboard),
                MessageHandler(filters.TEXT & ~filters.COMMAND, message_handlers.handle_start_row_input),
                MessageHandler(filters.PHOTO, message_handlers.handle_photo)
            ],
            config.AWAITING_INGREDIENTS_FILE: [
                CallbackQueryHandler(callback_handlers.handle_callback_query),
                CallbackQueryHandler(callback_handlers.handle_correction_choice),
                CommandHandler("dashboard", message_handlers.dashboard),
                MessageHandler(filters.Document.ALL, message_handlers.handle_ingredients_file_upload),
                MessageHandler(filters.PHOTO, message_handlers.handle_photo)
            ],
            config.AWAITING_INGREDIENTS_TEXT: [
                CallbackQueryHandler(callback_handlers.handle_callback_query),
                CallbackQueryHandler(callback_handlers.handle_correction_choice),
                CommandHandler("dashboard", message_handlers.dashboard),
                MessageHandler(filters.TEXT & ~filters.COMMAND, message_handlers.handle_ingredients_text_upload),
                MessageHandler(filters.PHOTO, message_handlers.handle_photo)
            ],
        },
        fallbacks=[
            CommandHandler("cancel", message_handlers.start),
            CommandHandler("dashboard", message_handlers.dashboard)
        ],
        per_message=False
    )

    # Add handlers
    application.add_handler(conv_handler)
    
    return application

async def initialize_bot():
    """Initialize the bot application and start background tasks"""
    global application, ingredient_storage, TOKEN, TELEGRAM_API
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –±–æ—Ç
    if application is not None:
        print("‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é")
        return
    
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
    
    # Debug: Print all environment variables
    print("üîç Debug: Environment variables:")
    for key, value in os.environ.items():
        if "TOKEN" in key or "PROJECT" in key or "WEBHOOK" in key:
            print(f"  {key}: {'*' * len(value) if value else 'NOT SET'}")
    
    # Check if BOT_TOKEN is available
    TOKEN = os.getenv("BOT_TOKEN")
    if not TOKEN:
        print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("üîç Available env vars with 'BOT':", [k for k in os.environ.keys() if 'BOT' in k])
        return
    
    TELEGRAM_API = f"https://api.telegram.org/bot{TOKEN}"
    print("‚úÖ BOT_TOKEN –Ω–∞–π–¥–µ–Ω")
    
    # Create application
    print("üîß –°–æ–∑–¥–∞–µ–º Telegram application...")
    application = create_application()
    print(f"‚úÖ Application —Å–æ–∑–¥–∞–Ω: {application}")
    
    # Initialize ingredient storage with 1 hour cleanup
    ingredient_storage = IngredientStorage(max_age_hours=1)
    
    # Start background cleanup task
    cleanup_task = asyncio.create_task(cleanup_old_files_periodically(ingredient_storage))
    print("‚úÖ –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–ø—É—â–µ–Ω–∞")
    
    # Initialize the application
    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram application...")
    await application.initialize()
    print("‚úÖ Telegram application –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ LocaleManager —Ä–∞–±–æ—Ç–∞–µ—Ç
    try:
        from config.locales.locale_manager import get_global_locale_manager
        lm = get_global_locale_manager()
        print(f"‚úÖ LocaleManager –ø—Ä–æ–≤–µ—Ä–µ–Ω: {lm}")
        if hasattr(lm, 'language_service') and lm.language_service and lm.language_service.db:
            print("‚úÖ LocaleManager –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Firestore")
        else:
            print("‚ö†Ô∏è LocaleManager –ù–ï –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Firestore")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ LocaleManager: {e}")
    
    print("üöÄ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è webhook —Ä–µ–∂–∏–º–∞")

@app.on_event("startup")
async def startup_event():
    """Initialize bot on startup"""
    try:
        await initialize_bot()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è

@app.get("/")
async def health_check():
    """Health check endpoint for Cloud Run - OPTIMIZED"""
    return {
        "status": "ok", 
        "message": "AI Bot is running",
        "application_initialized": application is not None,
        "firestore_connected": db is not None,
        "keep_alive_running": keep_alive_task_obj is not None and not keep_alive_task_obj.done()
    }

@app.get("/health")
async def health_ping():
    """Health ping endpoint –¥–ª—è keep-alive –∑–∞–ø—Ä–æ—Å–æ–≤"""
    return {"status": "ok"}

@app.post("/set_webhook")
async def set_webhook(request: Request):
    """Manual webhook setup endpoint"""
    try:
        data = await request.json()
        webhook_url = data.get("webhook_url")
        if not webhook_url:
            raise HTTPException(status_code=400, detail="webhook_url is required")
        
        if not application:
            raise HTTPException(status_code=500, detail="Bot not initialized")
        
        result = await application.bot.set_webhook(
            url=f"{webhook_url}/webhook",
            drop_pending_updates=True
        )
        
        return {
            "status": "success", 
            "webhook_url": f"{webhook_url}/webhook",
            "result": result
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/get_webhook")
async def get_webhook():
    """Get current webhook info"""
    try:
        if not application:
            return {
                "error": "Bot not initialized",
                "application_initialized": False,
                "webhook_info": None
            }
        
        webhook_info = await application.bot.get_webhook_info()
        
        return {
            "webhook_info": webhook_info.to_dict(),
            "application_initialized": True
        }
    except Exception as e:
        return {
            "error": str(e),
            "application_initialized": application is not None,
            "webhook_info": None
        }

@app.get("/debug")
async def debug_info():
    """Debug information endpoint"""
    from config.locales.locale_manager import get_global_locale_manager
    
    locale_manager_status = "Not initialized"
    try:
        lm = get_global_locale_manager()
        locale_manager_status = "Initialized"
        if hasattr(lm, 'language_service') and lm.language_service:
            if lm.language_service.db:
                locale_manager_status += " with Firestore"
            else:
                locale_manager_status += " without Firestore"
    except Exception as e:
        locale_manager_status = f"Error: {str(e)}"
    
    return {
        "application_initialized": application is not None,
        "firestore_connected": db is not None,
        "bot_token_set": TOKEN is not None,
        "locale_manager_status": locale_manager_status,
        "keep_alive_active": True,  # Keep-alive –≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
        "environment_vars": {
            "BOT_TOKEN": "***" if os.getenv("BOT_TOKEN") else "NOT SET",
            "PROJECT_ID": "***" if os.getenv("PROJECT_ID") else "NOT SET",
            "WEBHOOK_URL": "***" if os.getenv("WEBHOOK_URL") else "NOT SET",
            "GOOGLE_APPLICATION_CREDENTIALS_JSON": "***" if os.getenv("GOOGLE_APPLICATION_CREDENTIALS_JSON") else "NOT SET"
        },
        "google_sheets_config": {
            "credentials_path": "google_sheets_credentials.json",
            "spreadsheet_id": "1ah85v40ZqJzTz8PGHO6Ndoctw378NOYATH9X3OeeuUI",
            "service_available": google_sheets_service.is_available() if 'google_sheets_service' in locals() else False
        }
    }

@app.get("/keepalive")
async def keepalive_check():
    """Keep-alive check endpoint - OPTIMIZED"""
    import datetime
    current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    return {
        "status": "alive",
        "timestamp": current_time,
        "application_initialized": application is not None,
        "keep_alive_running": keep_alive_task_obj is not None and not keep_alive_task_obj.done(),
        "message": "Keep-alive check successful"
    }


@app.post("/webhook")
async def webhook(request: Request):
    """Webhook endpoint for Telegram updates - OPTIMIZED VERSION"""
    try:
        # Get the update from Telegram
        update_data = await request.json()
        
        if not update_data:
            return {"ok": True}
        
        if not application:
            return {"ok": True, "error": "Bot not initialized"}
        
        # Process the update DIRECTLY instead of background processing
        # This eliminates the overhead of asyncio.create_task()
        try:
            update = Update.de_json(update_data, application.bot)
            
            if not update:
                return {"ok": True}
            
            # Process the update directly
            await application.process_update(update)
            return {"ok": True}
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ update: {e}")
            return {"ok": True, "error": f"Processing error: {str(e)}"}
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook: {e}")
        return {"ok": True, "error": str(e)}

if __name__ == "__main__":
    import uvicorn
    port = int(os.environ.get("PORT", 8080))
    uvicorn.run(app, host="0.0.0.0", port=port)