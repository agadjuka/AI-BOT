"""
Ingredient matching callback handler for Telegram bot
"""
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from handlers.base_callback_handler import BaseCallbackHandler
from models.ingredient_matching import IngredientMatchingResult, IngredientMatch, MatchStatus
from services.ingredient_matching_service import IngredientMatchingService
from utils.ingredient_formatter import IngredientFormatter


class IngredientMatchingCallbackHandler(BaseCallbackHandler):
    """Handler for ingredient matching callbacks"""
    
    def __init__(self, config, analysis_service):
        super().__init__(config, analysis_service)
        self.ingredient_matching_service = IngredientMatchingService()
        self.ingredient_formatter = IngredientFormatter()
    
    async def _show_ingredient_matching_results(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show ingredient matching results"""
        query = update.callback_query
        await query.answer()
        
        matching_result = context.user_data.get('ingredient_matching_result')
        if not matching_result:
            await query.edit_message_text("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # Format matching results
        results_text = self.ingredient_formatter.format_matching_results(matching_result)
        
        # Create action buttons
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –†—É—á–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ", callback_data="manual_matching")],
            [InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É", callback_data="show_matching_table")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_edit")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self._send_long_message_with_keyboard_callback(query.message, results_text, reply_markup)
    
    async def _show_manual_matching_overview(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show manual matching overview"""
        query = update.callback_query
        await query.answer()
        
        matching_result = context.user_data.get('ingredient_matching_result')
        if not matching_result:
            await query.edit_message_text("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # Count different match statuses
        no_match_count = sum(1 for match in matching_result.matches if match.match_status == MatchStatus.NO_MATCH)
        matched_count = sum(1 for match in matching_result.matches if match.match_status == MatchStatus.MATCHED)
        partial_count = sum(1 for match in matching_result.matches if match.match_status == MatchStatus.PARTIAL_MATCH)
        
        overview_text = f"üîç **–û–±–∑–æ—Ä —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤**\n\n"
        overview_text += f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        overview_text += f"‚úÖ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {matched_count}\n"
        overview_text += f"‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ: {partial_count}\n"
        overview_text += f"‚ùå –ù–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {no_match_count}\n"
        overview_text += f"üìù –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π: {len(matching_result.matches)}\n\n"
        overview_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        # Create buttons for each unmatched item
        keyboard = []
        for i, match in enumerate(matching_result.matches):
            if match.match_status == MatchStatus.NO_MATCH:
                item_text = f"{i+1}. {match.receipt_item_name[:25]}{'...' if len(match.receipt_item_name) > 25 else ''}"
                keyboard.append([InlineKeyboardButton(f"üîç {item_text}", callback_data=f"match_item_{i}")])
        
        # Add control buttons
        keyboard.extend([
            [InlineKeyboardButton("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ", callback_data="auto_match_all")],
            [InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É", callback_data="show_matching_table")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_edit")]
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(overview_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def _show_position_selection_interface(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show position selection interface"""
        query = update.callback_query
        await query.answer()
        
        matching_result = context.user_data.get('ingredient_matching_result')
        if not matching_result:
            await query.edit_message_text("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # Show items that need matching
        items_text = "üîç **–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è:**\n\n"
        
        keyboard = []
        for i, match in enumerate(matching_result.matches):
            status_emoji = "‚úÖ" if match.match_status == MatchStatus.MATCHED else "‚ùå"
            item_text = f"{i+1}. {match.receipt_item_name[:30]}{'...' if len(match.receipt_item_name) > 30 else ''}"
            keyboard.append([InlineKeyboardButton(f"{status_emoji} {item_text}", callback_data=f"select_item_{i}")])
        
        # Add back button
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="manual_matching")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(items_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def _handle_item_selection_for_matching(self, update: Update, context: ContextTypes.DEFAULT_TYPE, item_index: int):
        """Handle item selection for matching"""
        query = update.callback_query
        await query.answer()
        
        matching_result = context.user_data.get('ingredient_matching_result')
        if not matching_result or item_index >= len(matching_result.matches):
            await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø–æ–∑–∏—Ü–∏–∏")
            return
        
        # Store current item index
        context.user_data['current_matching_item'] = item_index
        
        # Show manual matching for this item
        await self._show_manual_matching_for_current_item(update, context)
    
    async def _show_manual_matching_for_current_item(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show manual matching interface for current item"""
        query = update.callback_query
        await query.answer()
        
        matching_result = context.user_data.get('ingredient_matching_result')
        current_item = context.user_data.get('current_matching_item', 0)
        
        if not matching_result or current_item >= len(matching_result.matches):
            await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø–æ–∑–∏—Ü–∏–∏")
            return
        
        match = matching_result.matches[current_item]
        
        # Show item details and suggestions
        item_text = f"üîç **–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ {current_item + 1}:**\n\n"
        item_text += f"üìù **–¢–æ–≤–∞—Ä –∏–∑ —á–µ–∫–∞:** {match.receipt_item_name}\n\n"
        
        if match.suggested_matches:
            item_text += f"üí° **–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:**\n"
            for i, suggestion in enumerate(match.suggested_matches[:5], 1):
                item_text += f"{i}. {suggestion['name']} (—Å—Ö–æ–¥—Å—Ç–≤–æ: {suggestion['similarity']:.2f})\n"
        else:
            item_text += "‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
        
        # Create buttons
        keyboard = []
        
        # Add suggestion buttons
        for i, suggestion in enumerate(match.suggested_matches[:5], 1):
            suggestion_text = suggestion['name'][:25] + ('...' if len(suggestion['name']) > 25 else '')
            keyboard.append([InlineKeyboardButton(f"‚úÖ {i}. {suggestion_text}", callback_data=f"select_suggestion_{i-1}")])
        
        # Add control buttons
        keyboard.extend([
            [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –≤—Ä—É—á–Ω—É—é", callback_data="manual_search")],
            [InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_item")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="position_selection")]
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(item_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def _handle_ingredient_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE, suggestion_number: int):
        """Handle ingredient selection from suggestions"""
        query = update.callback_query
        await query.answer()
        
        matching_result = context.user_data.get('ingredient_matching_result')
        current_item = context.user_data.get('current_matching_item', 0)
        
        if not matching_result or current_item >= len(matching_result.matches):
            await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø–æ–∑–∏—Ü–∏–∏")
            return
        
        match = matching_result.matches[current_item]
        
        if suggestion_number >= len(match.suggested_matches):
            await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
            return
        
        # Select the suggestion
        selected_suggestion = match.suggested_matches[suggestion_number]
        match.matched_ingredient_name = selected_suggestion['name']
        match.matched_ingredient_id = selected_suggestion.get('id', '')
        match.match_status = MatchStatus.MATCHED
        match.similarity_score = selected_suggestion['similarity']
        
        # Update changed indices
        changed_indices = context.user_data.get('changed_ingredient_indices', set())
        changed_indices.add(current_item)
        context.user_data['changed_ingredient_indices'] = changed_indices
        
        # Save updated matching result
        self._save_ingredient_matching_data(update.effective_user.id, context)
        
        # Show success message and continue
        success_text = f"‚úÖ **–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!**\n\n"
        success_text += f"üìù **–¢–æ–≤–∞—Ä:** {match.receipt_item_name}\n"
        success_text += f"üéØ **–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç:** {match.matched_ingredient_name}\n"
        success_text += f"üìä **–°—Ö–æ–¥—Å—Ç–≤–æ:** {match.similarity_score:.2f}\n\n"
        success_text += "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏..."
        
        keyboard = [
            [InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è –ø–æ–∑–∏—Ü–∏—è", callback_data="next_item")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="position_selection")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(success_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def _process_next_ingredient_match(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Process next ingredient match"""
        query = update.callback_query
        await query.answer()
        
        matching_result = context.user_data.get('ingredient_matching_result')
        current_item = context.user_data.get('current_matching_item', 0)
        
        if not matching_result:
            await query.edit_message_text("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # Find next unmatched item
        next_item = None
        for i in range(current_item + 1, len(matching_result.matches)):
            if matching_result.matches[i].match_status == MatchStatus.NO_MATCH:
                next_item = i
                break
        
        if next_item is not None:
            context.user_data['current_matching_item'] = next_item
            await self._show_manual_matching_for_current_item(update, context)
        else:
            # No more items to match
            await self._show_final_ingredient_matching_result(update, context)
    
    async def _show_final_ingredient_matching_result(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show final ingredient matching result"""
        query = update.callback_query
        await query.answer()
        
        matching_result = context.user_data.get('ingredient_matching_result')
        if not matching_result:
            await query.edit_message_text("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # Count results
        matched_count = sum(1 for match in matching_result.matches if match.match_status == MatchStatus.MATCHED)
        total_count = len(matching_result.matches)
        
        result_text = f"üéâ **–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n\n"
        result_text += f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:**\n"
        result_text += f"‚úÖ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {matched_count}/{total_count}\n"
        result_text += f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç: {(matched_count/total_count*100):.1f}%\n\n"
        
        if matched_count == total_count:
            result_text += "üéØ –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã!"
        else:
            result_text += f"‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å: {total_count - matched_count} –ø–æ–∑–∏—Ü–∏–π"
        
        keyboard = [
            [InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É", callback_data="show_matching_table")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data="back_to_edit")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(result_text, reply_markup=reply_markup, parse_mode='Markdown')
