"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–∞–±–ª–∏—Ü
–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
"""
from typing import Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from handlers.base_callback_handler import BaseCallbackHandler
from config.table_config import TableType, DeviceType, TableConfig, ColumnConfig, TableStyle
from utils.table_manager import TableManager
from services.user_service import get_user_service


class TableSettingsHandler(BaseCallbackHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–∞–±–ª–∏—Ü"""
    
    def __init__(self, config, analysis_service):
        super().__init__(config, analysis_service)
        self.table_manager = TableManager(self.locale_manager)
    
    async def show_table_settings_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–∞–±–ª–∏—Ü"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            user_service = get_user_service()
            display_mode = await user_service.get_user_display_mode(user_id)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º display_mode –≤ DeviceType
            if display_mode == "desktop":
                device_type = DeviceType.DESKTOP
            else:
                device_type = DeviceType.MOBILE
        except Exception as e:
            print(f"‚ùå Error getting user display mode: {e}")
            device_type = DeviceType.MOBILE
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['device_type'] = device_type.value
        
        text = self.get_text("table_settings.menu.title", context)
        text += f"\n\nüì± **–¢–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:** {device_type.value.upper()}"
        
        keyboard = [
            [InlineKeyboardButton(
                self.get_text("table_settings.menu.ingredient_matching", context),
                callback_data="table_settings_ingredient_matching"
            )],
            [InlineKeyboardButton(
                self.get_text("table_settings.menu.google_sheets", context),
                callback_data="table_settings_google_sheets"
            )],
            [InlineKeyboardButton(
                self.get_text("table_settings.menu.receipt_preview", context),
                callback_data="table_settings_receipt_preview"
            )],
            [InlineKeyboardButton(
                self.get_text("table_settings.menu.next_items", context),
                callback_data="table_settings_next_items"
            )],
            [InlineKeyboardButton(
                self.get_text("table_settings.menu.device_type", context),
                callback_data="table_settings_device_type"
            )],
            [InlineKeyboardButton(
                self.get_text("table_settings.menu.reset_all", context),
                callback_data="table_settings_reset_all"
            )],
            [InlineKeyboardButton(
                self.get_text("buttons.back", context),
                callback_data="back_to_dashboard"
            )]
        ]
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
        return self.config.AWAITING_DASHBOARD
    
    async def show_table_type_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE, table_type: TableType) -> int:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ç–∞–±–ª–∏—Ü—ã"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        device_type = DeviceType(context.user_data.get('device_type', 'mobile'))
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        current_config = self.table_manager.get_user_table_settings(user_id).get(
            f"{table_type.value}_{device_type.value}"
        )
        
        if not current_config:
            current_config = self.table_manager.config_manager.get_config(table_type, device_type)
        
        text = f"**–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: {table_type.value}**\n\n"
        text += f"üì± **–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:** {device_type.value.upper()}\n"
        text += f"üìè **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è:** {current_config.style.max_name_length}\n"
        text += f"üìÑ **–≠–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:** {current_config.max_items_per_page}\n"
        text += f"üé® **–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º:** {'–î–∞' if current_config.style.compact_mode else '–ù–µ—Ç'}\n"
        text += f"üìä **–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —ç–º–æ–¥–∑–∏:** {'–î–∞' if current_config.style.use_emojis else '–ù–µ—Ç'}\n"
        
        keyboard = [
            [InlineKeyboardButton(
                f"üìè –î–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è: {current_config.style.max_name_length}",
                callback_data=f"table_settings_{table_type.value}_max_length"
            )],
            [InlineKeyboardButton(
                f"üìÑ –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {current_config.max_items_per_page}",
                callback_data=f"table_settings_{table_type.value}_items_per_page"
            )],
            [InlineKeyboardButton(
                f"üé® –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º: {'–î–∞' if current_config.style.compact_mode else '–ù–µ—Ç'}",
                callback_data=f"table_settings_{table_type.value}_compact_mode"
            )],
            [InlineKeyboardButton(
                f"üìä –≠–º–æ–¥–∑–∏: {'–î–∞' if current_config.style.use_emojis else '–ù–µ—Ç'}",
                callback_data=f"table_settings_{table_type.value}_emojis"
            )],
            [InlineKeyboardButton(
                "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º",
                callback_data=f"table_settings_{table_type.value}_reset"
            )],
            [InlineKeyboardButton(
                self.get_text("buttons.back", context),
                callback_data="table_settings_menu"
            )]
        ]
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
        return self.config.AWAITING_DASHBOARD
    
    async def update_table_setting(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                 table_type: TableType, setting: str) -> int:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ç–∞–±–ª–∏—Ü—ã"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        device_type = DeviceType(context.user_data.get('device_type', 'mobile'))
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        current_config = self.table_manager.get_user_table_settings(user_id).get(
            f"{table_type.value}_{device_type.value}"
        )
        
        if not current_config:
            current_config = self.table_manager.config_manager.get_config(table_type, device_type)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
        new_config = TableConfig(
            table_type=current_config.table_type,
            device_type=current_config.device_type,
            columns=current_config.columns.copy(),
            style=TableStyle(
                max_name_length=current_config.style.max_name_length,
                show_separators=current_config.style.show_separators,
                use_emojis=current_config.style.use_emojis,
                compact_mode=current_config.style.compact_mode,
                show_row_numbers=current_config.style.show_row_numbers,
                header_style=current_config.style.header_style
            ),
            title=current_config.title,
            description=current_config.description,
            max_items_per_page=current_config.max_items_per_page,
            show_pagination=current_config.show_pagination,
            custom_formatter=current_config.custom_formatter
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        if setting == "max_length":
            # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è
            lengths = [10, 15, 20, 25, 30]
            current_length = new_config.style.max_name_length
            try:
                current_index = lengths.index(current_length)
                new_index = (current_index + 1) % len(lengths)
            except ValueError:
                new_index = 0
            new_config.style.max_name_length = lengths[new_index]
            
        elif setting == "items_per_page":
            # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            counts = [5, 8, 10, 15, 20]
            current_count = new_config.max_items_per_page
            try:
                current_index = counts.index(current_count)
                new_index = (current_index + 1) % len(counts)
            except ValueError:
                new_index = 0
            new_config.max_items_per_page = counts[new_index]
            
        elif setting == "compact_mode":
            new_config.style.compact_mode = not new_config.style.compact_mode
            
        elif setting == "emojis":
            new_config.style.use_emojis = not new_config.style.use_emojis
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.table_manager.update_user_table_settings(user_id, table_type, device_type, new_config)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        return await self.show_table_type_settings(update, context, table_type)
    
    async def reset_table_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE, table_type: TableType) -> int:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        device_type = DeviceType(context.user_data.get('device_type', 'mobile'))
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.table_manager.reset_user_table_settings(user_id, table_type, device_type)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        return await self.show_table_type_settings(update, context, table_type)
    
    async def show_device_type_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        query = update.callback_query
        await query.answer()
        
        current_device = context.user_data.get('device_type', 'mobile')
        
        text = f"**–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞**\n\n"
        text += f"üì± **–¢–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:** {current_device.upper()}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü:\n\n"
        text += "‚Ä¢ **–ú–æ–±–∏–ª—å–Ω–æ–µ** - –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤\n"
        text += "‚Ä¢ **–ü–ª–∞–Ω—à–µ—Ç** - —Å—Ä–µ–¥–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤\n"
        text += "‚Ä¢ **–î–µ—Å–∫—Ç–æ–ø** - –ø–æ–ª–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –±–æ–ª—å—à–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤"
        
        keyboard = [
            [InlineKeyboardButton(
                f"üì± –ú–æ–±–∏–ª—å–Ω–æ–µ {'‚úÖ' if current_device == 'mobile' else ''}",
                callback_data="table_settings_device_mobile"
            )],
            [InlineKeyboardButton(
                f"üì± –ü–ª–∞–Ω—à–µ—Ç {'‚úÖ' if current_device == 'tablet' else ''}",
                callback_data="table_settings_device_tablet"
            )],
            [InlineKeyboardButton(
                f"üíª –î–µ—Å–∫—Ç–æ–ø {'‚úÖ' if current_device == 'desktop' else ''}",
                callback_data="table_settings_device_desktop"
            )],
            [InlineKeyboardButton(
                self.get_text("buttons.back", context),
                callback_data="table_settings_menu"
            )]
        ]
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
        return self.config.AWAITING_DASHBOARD
    
    async def set_device_type(self, update: Update, context: ContextTypes.DEFAULT_TYPE, device_type: DeviceType) -> int:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['device_type'] = device_type.value
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ Firestore
        try:
            user_service = get_user_service()
            display_mode = "desktop" if device_type == DeviceType.DESKTOP else "mobile"
            success = await user_service.set_user_display_mode(user_id, display_mode)
            
            if success:
                print(f"‚úÖ Updated user {user_id} display mode to {display_mode}")
            else:
                print(f"‚ùå Failed to update user {user_id} display mode")
        except Exception as e:
            print(f"‚ùå Error setting user display mode: {e}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        return await self.show_device_type_settings(update, context)
    
    async def reset_all_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–ª–∏—Ü"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        for table_type in TableType:
            for device_type in DeviceType:
                self.table_manager.reset_user_table_settings(user_id, table_type, device_type)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data.pop('device_type', None)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ Firestore (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        try:
            user_service = get_user_service()
            success = await user_service.set_user_display_mode(user_id, "mobile")
            
            if success:
                print(f"‚úÖ Reset user {user_id} display mode to mobile")
            else:
                print(f"‚ùå Failed to reset user {user_id} display mode")
        except Exception as e:
            print(f"‚ùå Error resetting user display mode: {e}")
        
        text = "‚úÖ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–ª–∏—Ü —Å–±—Ä–æ—à–µ–Ω—ã –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º!"
        
        keyboard = [
            [InlineKeyboardButton(
                self.get_text("buttons.back", context),
                callback_data="table_settings_menu"
            )]
        ]
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
        return self.config.AWAITING_DASHBOARD
