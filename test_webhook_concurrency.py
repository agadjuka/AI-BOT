#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–≥—É—Ç –ª–∏ –≤–µ–±—Ö—É–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ñ–æ—Ç–æ
"""
import asyncio
import aiohttp
import json
import time
from typing import Dict, Any

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è webhook
def create_photo_update(user_id: int, message_id: int) -> Dict[str, Any]:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π update —Å —Ñ–æ—Ç–æ"""
    return {
        "update_id": message_id,
        "message": {
            "message_id": message_id,
            "from": {
                "id": user_id,
                "is_bot": False,
                "first_name": f"TestUser{user_id}",
                "username": f"testuser{user_id}"
            },
            "chat": {
                "id": user_id,
                "first_name": f"TestUser{user_id}",
                "username": f"testuser{user_id}",
                "type": "private"
            },
            "date": int(time.time()),
            "photo": [
                {
                    "file_id": f"test_photo_{message_id}_small",
                    "file_unique_id": f"test_unique_{message_id}_small",
                    "width": 90,
                    "height": 90,
                    "file_size": 1000
                },
                {
                    "file_id": f"test_photo_{message_id}_medium",
                    "file_unique_id": f"test_unique_{message_id}_medium",
                    "width": 320,
                    "height": 320,
                    "file_size": 5000
                },
                {
                    "file_id": f"test_photo_{message_id}_large",
                    "file_unique_id": f"test_unique_{message_id}_large",
                    "width": 800,
                    "height": 800,
                    "file_size": 20000
                }
            ]
        }
    }

async def send_webhook_request(session: aiohttp.ClientSession, webhook_url: str, 
                             update_data: Dict[str, Any], request_id: int) -> Dict[str, Any]:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç webhook –∑–∞–ø—Ä–æ—Å"""
    try:
        print(f"üì§ –ó–∞–ø—Ä–æ—Å {request_id}: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook...")
        start_time = time.time()
        
        async with session.post(
            webhook_url,
            json=update_data,
            headers={'Content-Type': 'application/json'},
            timeout=aiohttp.ClientTimeout(total=30)
        ) as response:
            response_data = await response.json()
            end_time = time.time()
            
            print(f"‚úÖ –ó–∞–ø—Ä–æ—Å {request_id}: –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ {end_time - start_time:.2f} —Å–µ–∫")
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status}, –û—Ç–≤–µ—Ç: {response_data}")
            
            return {
                'request_id': request_id,
                'status': response.status,
                'response': response_data,
                'duration': end_time - start_time,
                'success': response.status == 200
            }
            
    except asyncio.TimeoutError:
        print(f"‚è∞ –ó–∞–ø—Ä–æ—Å {request_id}: –¢–∞–π–º–∞—É—Ç")
        return {
            'request_id': request_id,
            'status': 408,
            'response': {'error': 'timeout'},
            'duration': 30.0,
            'success': False
        }
    except Exception as e:
        print(f"‚ùå –ó–∞–ø—Ä–æ—Å {request_id}: –û—à–∏–±–∫–∞: {e}")
        return {
            'request_id': request_id,
            'status': 500,
            'response': {'error': str(e)},
            'duration': 0.0,
            'success': False
        }

async def test_concurrent_webhooks(webhook_url: str, num_requests: int = 5):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É webhook –∑–∞–ø—Ä–æ—Å–æ–≤"""
    print(f"üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {num_requests} –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö webhook –∑–∞–ø—Ä–æ—Å–æ–≤...")
    print(f"üåê URL: {webhook_url}")
    
    # –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Å—Å–∏—é
    connector = aiohttp.TCPConnector(limit=100, limit_per_host=50)
    timeout = aiohttp.ClientTimeout(total=60)
    
    async with aiohttp.ClientSession(connector=connector, timeout=timeout) as session:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        updates = []
        for i in range(num_requests):
            user_id = 1000 + i
            message_id = 2000 + i
            update = create_photo_update(user_id, message_id)
            updates.append(update)
        
        print(f"üìä –°–æ–∑–¥–∞–Ω–æ {len(updates)} —Ç–µ—Å—Ç–æ–≤—ã—Ö updates")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        start_time = time.time()
        
        tasks = []
        for i, update in enumerate(updates):
            task = send_webhook_request(session, webhook_url, update, i + 1)
            tasks.append(task)
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        end_time = time.time()
        total_time = end_time - start_time
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        successful_requests = 0
        total_duration = 0
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        for result in results:
            if isinstance(result, Exception):
                print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {result}")
            else:
                if result['success']:
                    successful_requests += 1
                    total_duration += result['duration']
                print(f"üìã –ó–∞–ø—Ä–æ—Å {result['request_id']}: "
                      f"–°—Ç–∞—Ç—É—Å {result['status']}, "
                      f"–í—Ä–µ–º—è {result['duration']:.2f}—Å, "
                      f"–£—Å–ø–µ—Ö: {'‚úÖ' if result['success'] else '‚ùå'}")
        
        success_rate = successful_requests / num_requests * 100
        avg_duration = total_duration / successful_requests if successful_requests > 0 else 0
        
        print(f"\nüéØ –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {successful_requests}/{num_requests} ({success_rate:.1f}%)")
        print(f"   ‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_duration:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"   üöÄ –û–±—â–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {num_requests/total_time:.2f} –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫")
        
        return success_rate == 100 and avg_duration < 10

async def test_webhook_health(webhook_url: str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ webhook"""
    print(f"üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è webhook: {webhook_url}")
    
    try:
        async with aiohttp.ClientSession() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º health check
            health_url = webhook_url.replace('/webhook', '/')
            async with session.get(health_url, timeout=aiohttp.ClientTimeout(total=10)) as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"‚úÖ Health check: {data}")
                    return True
                else:
                    print(f"‚ùå Health check failed: {response.status}")
                    return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ health check: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ò WEBHOOK")
    print("=" * 60)
    
    # URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à)
    webhook_url = "https://ai-bot-xxxxx-uc.a.run.app/webhook"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL
    
    print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ó–∞–º–µ–Ω–∏—Ç–µ webhook_url –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL –≤–∞—à–µ–≥–æ –±–æ—Ç–∞!")
    print(f"üåê –¢–µ–∫—É—â–∏–π URL: {webhook_url}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –∏–∑–º–µ–Ω–µ–Ω
    if "xxxxx" in webhook_url:
        print("\n‚ùå –û–®–ò–ë–ö–ê: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π URL webhook!")
        print("üí° –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª test_webhook_concurrency.py –∏ –∑–∞–º–µ–Ω–∏—Ç–µ webhook_url")
        return
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
        print("\nüî¨ –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è webhook")
        health_ok = loop.run_until_complete(test_webhook_health(webhook_url))
        
        if not health_ok:
            print("‚ùå Webhook –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ç–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω")
            return
        
        # –¢–µ—Å—Ç 2: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        print("\nüî¨ –¢–ï–°–¢ 2: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ webhook")
        concurrency_ok = loop.run_until_complete(test_concurrent_webhooks(webhook_url, 5))
        
        print("\n" + "=" * 60)
        print("üìã –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"   ‚úÖ Health check: {'–ü–†–û–ô–î–ï–ù' if health_ok else '–ü–†–û–í–ê–õ–ï–ù'}")
        print(f"   ‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: {'–ü–†–û–ô–î–ï–ù' if concurrency_ok else '–ü–†–û–í–ê–õ–ï–ù'}")
        
        if health_ok and concurrency_ok:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! Webhook –º–æ–∂–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã.")
            print("üí° –í–∞—à –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–≤–∏—Ç–∞–Ω—Ü–∏–π!")
        else:
            print("\n‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞.")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
