#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ keep-alive –º–µ—Ö–∞–Ω–∏–∑–º–∞
–ú–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏
"""
import os
import asyncio
import httpx
from datetime import datetime

async def test_keep_alive_ping(service_url: str, test_duration: int = 30):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç keep-alive ping –≤ —Ç–µ—á–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    print(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ keep-alive ping –¥–ª—è {service_url}")
    print(f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞: {test_duration} —Å–µ–∫—É–Ω–¥")
    print("=" * 50)
    
    start_time = datetime.now()
    ping_count = 0
    success_count = 0
    error_count = 0
    
    while (datetime.now() - start_time).total_seconds() < test_duration:
        try:
            ping_count += 1
            current_time = datetime.now().strftime("%H:%M:%S")
            
            print(f"[{current_time}] Ping #{ping_count}...", end=" ")
            
            async with httpx.AsyncClient(timeout=10.0) as client:
                response = await client.get(f"{service_url}/health")
                
                if response.status_code == 200:
                    success_count += 1
                    print("‚úÖ Success")
                else:
                    error_count += 1
                    print(f"‚ùå HTTP {response.status_code}")
                    
        except Exception as e:
            error_count += 1
            print(f"‚ùå Error: {e}")
        
        # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø–∏–Ω–≥–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await asyncio.sleep(10)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("=" * 50)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   –í—Å–µ–≥–æ –ø–∏–Ω–≥–æ–≤: {ping_count}")
    print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {success_count}")
    print(f"   –û—à–∏–±–æ–∫: {error_count}")
    print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(success_count/ping_count*100):.1f}%")

async def test_local_health_endpoint():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π health endpoint"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ health endpoint...")
    
    try:
        async with httpx.AsyncClient(timeout=5.0) as client:
            response = await client.get("http://localhost:8080/health")
            print(f"‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π health endpoint: HTTP {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.json()}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:8080")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ keep-alive –º–µ—Ö–∞–Ω–∏–∑–º–∞")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é SERVICE_URL
    service_url = os.getenv("SERVICE_URL")
    
    if service_url:
        print(f"‚úÖ SERVICE_URL –Ω–∞–π–¥–µ–Ω: {service_url}")
        print("üß™ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç keep-alive ping...")
        asyncio.run(test_keep_alive_ping(service_url, test_duration=60))
    else:
        print("‚ö†Ô∏è SERVICE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("üí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Cloud Run —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é SERVICE_URL")
        print("üí° –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ localhost")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä...")
        asyncio.run(test_local_health_endpoint())

if __name__ == "__main__":
    main()