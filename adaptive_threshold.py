#!/usr/bin/env python3
"""
–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ —Ö–∞–æ—Å–∞
"""

import asyncio
import os
import cv2
import numpy as np
from utils.receipt_analyzer import analyze_receipt_and_choose_model, find_character_contours, group_characters_into_lines, calculate_chaos_index, straighten_receipt

async def analyze_chaos_distribution():
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ —Ö–∞–æ—Å–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞
    """
    print("üìä –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ —Ö–∞–æ—Å–∞")
    print("=" * 50)
    
    all_chaos_indices = []
    labels = []
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—á–∞—Ç–Ω—ã–µ —á–µ–∫–∏
    machine_folder = "–æ–±—É—á–µ–Ω–∏–µ/–ú–∞—à–∏–Ω–∞"
    machine_files = [f for f in os.listdir(machine_folder) if f.lower().endswith(('.jpg', '.jpeg', '.png'))]
    
    print(f"\nüìÑ –ê–Ω–∞–ª–∏–∑ –ø–µ—á–∞—Ç–Ω—ã—Ö —á–µ–∫–æ–≤ ({len(machine_files)} —Ñ–∞–π–ª–æ–≤):")
    for filename in machine_files:
        filepath = os.path.join(machine_folder, filename)
        
        try:
            with open(filepath, 'rb') as f:
                image_bytes = f.read()
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            nparr = np.frombuffer(image_bytes, np.uint8)
            image = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
            
            if image is None:
                continue
            
            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä
            height, width = image.shape[:2]
            max_width = 1000
            if width > max_width:
                scale = max_width / width
                new_width = max_width
                new_height = int(height * scale)
                image = cv2.resize(image, (new_width, new_height), interpolation=cv2.INTER_AREA)
            
            # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏ –Ω–∞—Ö–æ–¥–∏–º —Å–∏–º–≤–æ–ª—ã
            straightened = straighten_receipt(image)
            gray = cv2.cvtColor(straightened, cv2.COLOR_BGR2GRAY)
            characters = find_character_contours(gray)
            lines = group_characters_into_lines(characters)
            
            file_indices = []
            for line in lines:
                if len(line) >= 2:
                    chaos_index = calculate_chaos_index(line)
                    file_indices.append(chaos_index)
                    all_chaos_indices.append(chaos_index)
                    labels.append('printed')
            
            if file_indices:
                avg_chaos = np.mean(file_indices)
                max_chaos = np.max(file_indices)
                print(f"  {filename}: —Å—Ä–µ–¥–Ω–∏–π={avg_chaos:.3f}, –º–∞–∫—Å–∏–º—É–º={max_chaos:.3f}")
            
        except Exception as e:
            print(f"  {filename}: –æ—à–∏–±–∫–∞ - {e}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—É–∫–æ–ø–∏—Å–Ω—ã–µ —á–µ–∫–∏
    hand_folder = "–æ–±—É—á–µ–Ω–∏–µ/–†—É–∫–∞"
    hand_files = [f for f in os.listdir(hand_folder) if f.lower().endswith(('.jpg', '.jpeg', '.png'))]
    
    print(f"\n‚úçÔ∏è –ê–Ω–∞–ª–∏–∑ —Ä—É–∫–æ–ø–∏—Å–Ω—ã—Ö —á–µ–∫–æ–≤ ({len(hand_files)} —Ñ–∞–π–ª–æ–≤):")
    for filename in hand_files:
        filepath = os.path.join(hand_folder, filename)
        
        try:
            with open(filepath, 'rb') as f:
                image_bytes = f.read()
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            nparr = np.frombuffer(image_bytes, np.uint8)
            image = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
            
            if image is None:
                continue
            
            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä
            height, width = image.shape[:2]
            max_width = 1000
            if width > max_width:
                scale = max_width / width
                new_width = max_width
                new_height = int(height * scale)
                image = cv2.resize(image, (new_width, new_height), interpolation=cv2.INTER_AREA)
            
            # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏ –Ω–∞—Ö–æ–¥–∏–º —Å–∏–º–≤–æ–ª—ã
            straightened = straighten_receipt(image)
            gray = cv2.cvtColor(straightened, cv2.COLOR_BGR2GRAY)
            characters = find_character_contours(gray)
            lines = group_characters_into_lines(characters)
            
            file_indices = []
            for line in lines:
                if len(line) >= 2:
                    chaos_index = calculate_chaos_index(line)
                    file_indices.append(chaos_index)
                    all_chaos_indices.append(chaos_index)
                    labels.append('handwritten')
            
            if file_indices:
                avg_chaos = np.mean(file_indices)
                max_chaos = np.max(file_indices)
                print(f"  {filename}: —Å—Ä–µ–¥–Ω–∏–π={avg_chaos:.3f}, –º–∞–∫—Å–∏–º—É–º={max_chaos:.3f}")
            
        except Exception as e:
            print(f"  {filename}: –æ—à–∏–±–∫–∞ - {e}")
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    if all_chaos_indices:
        printed_indices = [idx for idx, label in zip(all_chaos_indices, labels) if label == 'printed']
        handwritten_indices = [idx for idx, label in zip(all_chaos_indices, labels) if label == 'handwritten']
        
        print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:")
        print(f"–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {len(all_chaos_indices)}")
        print(f"–ü–µ—á–∞—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏: {len(printed_indices)}")
        print(f"–†—É–∫–æ–ø–∏—Å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏: {len(handwritten_indices)}")
        
        if printed_indices:
            print(f"\nüìÑ –ü–µ—á–∞—Ç–Ω—ã–µ —á–µ–∫–∏:")
            print(f"  –°—Ä–µ–¥–Ω–∏–π –∏–Ω–¥–µ–∫—Å —Ö–∞–æ—Å–∞: {np.mean(printed_indices):.3f}")
            print(f"  –ú–µ–¥–∏–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ö–∞–æ—Å–∞: {np.median(printed_indices):.3f}")
            print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ö–∞–æ—Å–∞: {np.max(printed_indices):.3f}")
            print(f"  –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {np.std(printed_indices):.3f}")
        
        if handwritten_indices:
            print(f"\n‚úçÔ∏è –†—É–∫–æ–ø–∏—Å–Ω—ã–µ —á–µ–∫–∏:")
            print(f"  –°—Ä–µ–¥–Ω–∏–π –∏–Ω–¥–µ–∫—Å —Ö–∞–æ—Å–∞: {np.mean(handwritten_indices):.3f}")
            print(f"  –ú–µ–¥–∏–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ö–∞–æ—Å–∞: {np.median(handwritten_indices):.3f}")
            print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ö–∞–æ—Å–∞: {np.max(handwritten_indices):.3f}")
            print(f"  –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {np.std(handwritten_indices):.3f}")
        
        # –ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞
        print(f"\nüéØ –ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞:")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
        thresholds = np.arange(0.1, 1.0, 0.05)
        best_threshold = 0.5
        best_accuracy = 0
        
        for threshold in thresholds:
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é
            correct = 0
            total = len(all_chaos_indices)
            
            for idx, label in zip(all_chaos_indices, labels):
                predicted = 'pro' if idx > threshold else 'flash'
                expected = 'pro' if label == 'handwritten' else 'flash'
                if predicted == expected:
                    correct += 1
            
            accuracy = correct / total
            print(f"  –ü–æ—Ä–æ–≥ {threshold:.2f}: —Ç–æ—á–Ω–æ—Å—Ç—å {accuracy:.3f}")
            
            if accuracy > best_accuracy:
                best_accuracy = accuracy
                best_threshold = threshold
        
        print(f"\nüèÜ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥: {best_threshold:.2f} (—Ç–æ—á–Ω–æ—Å—Ç—å: {best_accuracy:.3f})")
        
        return best_threshold, best_accuracy
    
    return 0.5, 0.0

if __name__ == "__main__":
    asyncio.run(analyze_chaos_distribution())
