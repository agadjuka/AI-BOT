#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–∞ –ø–∞–ø–∫–∞—Ö "–ú–∞—à–∏–Ω–∞" (–¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ –≤ FLASH) –∏ "–†—É–∫–∞" (–¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ –≤ PRO)
"""
import os
import asyncio
import time
from pathlib import Path
from typing import List, Tuple, Dict
import cv2
import numpy as np

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞
from utils.receipt_analyzer import analyze_receipt_and_choose_model


class AccuracyTester:
    def __init__(self):
        self.test_dir = Path("–û–±—É—á–µ–Ω–∏–µ")
        self.machine_dir = self.test_dir / "–ú–∞—à–∏–Ω–∞"  # –î–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ –≤ FLASH
        self.hand_dir = self.test_dir / "–†—É–∫–∞"       # –î–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ –≤ PRO
        
        self.results = {
            'machine': {'correct': 0, 'total': 0, 'details': []},
            'hand': {'correct': 0, 'total': 0, 'details': []}
        }
    
    def load_test_images(self) -> Tuple[List[Tuple[str, str]], List[Tuple[str, str]]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—É—Ç–∏ –∫ —Ç–µ—Å—Ç–æ–≤—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º"""
        machine_images = []
        hand_images = []
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è "–º–∞—à–∏–Ω–∞" (–¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ –≤ FLASH)
        if self.machine_dir.exists():
            for img_file in self.machine_dir.glob("*.jpg"):
                machine_images.append((str(img_file), "flash"))
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è "—Ä—É–∫–∞" (–¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ –≤ PRO)
        if self.hand_dir.exists():
            for img_file in self.hand_dir.glob("*.jpg"):
                hand_images.append((str(img_file), "pro"))
        
        return machine_images, hand_images
    
    async def test_single_image(self, image_path: str, expected_model: str) -> Dict:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        try:
            print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º: {os.path.basename(image_path)} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: {expected_model.upper()})")
            
            # –ß–∏—Ç–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            with open(image_path, 'rb') as f:
                image_bytes = f.read()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
            start_time = time.time()
            predicted_model = await analyze_receipt_and_choose_model(image_bytes)
            end_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            is_correct = predicted_model == expected_model
            confidence = "‚úÖ" if is_correct else "‚ùå"
            
            result = {
                'image_path': image_path,
                'expected': expected_model,
                'predicted': predicted_model,
                'correct': is_correct,
                'time': end_time - start_time,
                'confidence': confidence
            }
            
            print(f"  {confidence} –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–æ: {predicted_model.upper()}, –≤—Ä–µ–º—è: {result['time']:.2f}—Å")
            
            return result
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
            return {
                'image_path': image_path,
                'expected': expected_model,
                'predicted': 'error',
                'correct': False,
                'time': 0,
                'confidence': "‚ùå",
                'error': str(e)
            }
    
    async def run_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏")
        print("=" * 70)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        machine_images, hand_images = self.load_test_images()
        
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:")
        print(f"  - –ú–∞—à–∏–Ω–∞ (–¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ –≤ FLASH): {len(machine_images)}")
        print(f"  - –†—É–∫–∞ (–¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ –≤ PRO): {len(hand_images)}")
        print()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è "–º–∞—à–∏–Ω–∞"
        print("üñ®Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è '–ú–∞—à–∏–Ω–∞' (–ø–µ—á–∞—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç ‚Üí FLASH):")
        print("-" * 50)
        
        for image_path, expected in machine_images:
            result = await self.test_single_image(image_path, expected)
            self.results['machine']['details'].append(result)
            self.results['machine']['total'] += 1
            if result['correct']:
                self.results['machine']['correct'] += 1
        
        print()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è "—Ä—É–∫–∞"
        print("‚úçÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è '–†—É–∫–∞' (—Ä—É–∫–æ–ø–∏—Å–Ω—ã–π —Ç–µ–∫—Å—Ç ‚Üí PRO):")
        print("-" * 50)
        
        for image_path, expected in hand_images:
            result = await self.test_single_image(image_path, expected)
            self.results['hand']['details'].append(result)
            self.results['hand']['total'] += 1
            if result['correct']:
                self.results['hand']['correct'] += 1
        
        print()
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.print_results()
    
    def print_results(self):
        """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 70)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        for category, data in self.results.items():
            category_name = "–ú–∞—à–∏–Ω–∞ (FLASH)" if category == 'machine' else "–†—É–∫–∞ (PRO)"
            accuracy = (data['correct'] / data['total'] * 100) if data['total'] > 0 else 0
            
            print(f"\n{category_name}:")
            print(f"  –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {data['correct']}/{data['total']} ({accuracy:.1f}%)")
            
            # –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            for detail in data['details']:
                status = "‚úÖ" if detail['correct'] else "‚ùå"
                filename = os.path.basename(detail['image_path'])
                print(f"    {status} {filename}: {detail['predicted'].upper()} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {detail['expected'].upper()})")
        
        # –û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        total_correct = self.results['machine']['correct'] + self.results['hand']['correct']
        total_images = self.results['machine']['total'] + self.results['hand']['total']
        overall_accuracy = (total_correct / total_images * 100) if total_images > 0 else 0
        
        print(f"\nüéØ –û–ë–©–ê–Ø –¢–û–ß–ù–û–°–¢–¨: {total_correct}/{total_images} ({overall_accuracy:.1f}%)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –º—ã —Ü–µ–ª–∏ –≤ 90%
        if overall_accuracy >= 90:
            print("üéâ –¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê! –¢–æ—á–Ω–æ—Å—Ç—å >= 90%")
        else:
            print(f"‚ö†Ô∏è –¶–µ–ª—å –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞. –ù—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–∞ {90 - overall_accuracy:.1f}%")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        all_times = []
        for category_data in self.results.values():
            for detail in category_data['details']:
                if 'time' in detail and detail['time'] > 0:
                    all_times.append(detail['time'])
        
        if all_times:
            avg_time = sum(all_times) / len(all_times)
            print(f"\n‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {avg_time:.2f} —Å–µ–∫—É–Ω–¥")
    
    def analyze_errors(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞"""
        print("\nüîç –ê–ù–ê–õ–ò–ó –û–®–ò–ë–û–ö")
        print("-" * 30)
        
        errors = []
        for category, data in self.results.items():
            for detail in data['details']:
                if not detail['correct']:
                    errors.append({
                        'category': category,
                        'image': os.path.basename(detail['image_path']),
                        'expected': detail['expected'],
                        'predicted': detail['predicted']
                    })
        
        if not errors:
            print("üéâ –û—à–∏–±–æ–∫ –Ω–µ—Ç!")
            return
        
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(errors)} –æ—à–∏–±–æ–∫:")
        for error in errors:
            category_name = "–ú–∞—à–∏–Ω–∞" if error['category'] == 'machine' else "–†—É–∫–∞"
            print(f"  - {category_name}: {error['image']} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {error['expected']}, –ø–æ–ª—É—á–µ–Ω–æ: {error['predicted']})")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = AccuracyTester()
    
    try:
        await tester.run_tests()
        tester.analyze_errors()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())