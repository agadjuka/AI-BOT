#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –Ω–æ–≤—ã–º–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏
"""
import os
import time
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
import sys
sys.path.append('.')

from config.settings import BotConfig
from config.prompts import PromptManager
from services.ai_service import AIServiceFactory
from handlers.photo_handler import PhotoHandler

async def test_photo_processing_performance():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = BotConfig()
    prompt_manager = PromptManager()
    
    # –°–æ–∑–¥–∞–µ–º AI —Å–µ—Ä–≤–∏—Å
    ai_factory = AIServiceFactory(config, prompt_manager)
    ai_service = ai_factory.get_default_service()
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    from services.ai_service import ReceiptAnalysisServiceCompat
    analysis_service = ReceiptAnalysisServiceCompat(ai_service, ai_factory)
    photo_handler = PhotoHandler(config, analysis_service)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    test_images = [
        "last_photo.jpg",
        "analyzed_last_photo.jpg"
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    available_images = []
    for img in test_images:
        if os.path.exists(img):
            available_images.append(img)
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {img}")
        else:
            print(f"‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {img}")
    
    if not available_images:
        print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        print("üí° –ü–æ–º–µ—Å—Ç–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ–∫–æ–≤ –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(available_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    total_time = 0
    for i, image_path in enumerate(available_images, 1):
        print(f"\nüì∏ –¢–µ—Å—Ç {i}/{len(available_images)}: {image_path}")
        
        # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
        start_time = time.time()
        chosen_model = photo_handler._choose_model_simple()
        model_time = time.time() - start_time
        
        print(f"   üéØ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {chosen_model} (–≤—Ä–µ–º—è: {model_time:.3f}—Å)")
        
        # –ò–∑–º–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = os.path.getsize(image_path)
        print(f"   üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size:,} –±–∞–π—Ç ({file_size/1024:.1f} KB)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OpenCV
        opencv_disabled = getattr(config, 'DISABLE_OPENCV_ANALYSIS', True)
        print(f"   üîß OpenCV –∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª—é—á–µ–Ω: {opencv_disabled}")
        
        total_time += model_time
    
    print("\n" + "=" * 60)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(available_images)}")
    print(f"   ‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏: {total_time:.3f}—Å")
    print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {total_time/len(available_images):.3f}—Å")
    print(f"   ‚Ä¢ OpenCV –∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª—é—á–µ–Ω: {getattr(config, 'DISABLE_OPENCV_ANALYSIS', True)}")
    print(f"   ‚Ä¢ –ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {getattr(config, 'DEFAULT_MODEL', 'pro')}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    if total_time < 0.1:
        print("   ‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å! –í—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ < 0.1—Å")
    elif total_time < 0.5:
        print("   ‚úÖ –•–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å! –í—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ < 0.5—Å")
    else:
        print("   ‚ö†Ô∏è –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å —É–ª—É—á—à–µ–Ω–∞")
    
    if getattr(config, 'DISABLE_OPENCV_ANALYSIS', True):
        print("   ‚úÖ OpenCV –∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª—é—á–µ–Ω - —ç—Ç–æ —É—Å–∫–æ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É")
    else:
        print("   ‚ö†Ô∏è OpenCV –∞–Ω–∞–ª–∏–∑ –≤–∫–ª—é—á–µ–Ω - —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–º–µ–¥–ª—è—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É")
    
    print("\nüîß –ù–ê–°–¢–†–û–ô–ö–ò –î–õ–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:")
    print("   ‚Ä¢ DISABLE_OPENCV_ANALYSIS=true (–æ—Ç–∫–ª—é—á–∏—Ç—å OpenCV)")
    print("   ‚Ä¢ DEFAULT_MODEL=flash (–±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å)")
    print("   ‚Ä¢ DEFAULT_MODEL=pro (–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å)")

def test_configuration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    print("\nüîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
    print("=" * 60)
    
    config = BotConfig()
    
    print(f"üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print(f"   ‚Ä¢ DEFAULT_MODEL: {getattr(config, 'DEFAULT_MODEL', 'pro')}")
    print(f"   ‚Ä¢ DISABLE_OPENCV_ANALYSIS: {getattr(config, 'DISABLE_OPENCV_ANALYSIS', True)}")
    print(f"   ‚Ä¢ GEMINI_ANALYSIS_MODE: {getattr(config, 'GEMINI_ANALYSIS_MODE', 'production')}")
    print(f"   ‚Ä¢ MODEL_PRO: {getattr(config, 'MODEL_PRO', 'gemini-2.5-pro')}")
    print(f"   ‚Ä¢ MODEL_FLASH: {getattr(config, 'MODEL_FLASH', 'gemini-2.5-flash')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print(f"\nüåç –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    env_vars = [
        'DISABLE_OPENCV_ANALYSIS',
        'DEFAULT_MODEL', 
        'GEMINI_ANALYSIS_MODE'
    ]
    
    for var in env_vars:
        value = os.getenv(var, '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–û')
        print(f"   ‚Ä¢ {var}: {value}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    test_configuration()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    await test_photo_processing_performance()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(main())
