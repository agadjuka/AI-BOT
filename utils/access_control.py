"""
Access Control Decorator for AI Bot
Provides @access_check decorator for controlling access to bot handlers
"""

import functools
from typing import Callable, Any, Optional
from telegram import Update
from telegram.ext import ContextTypes

from config.settings import BotConfig
from services.user_service import get_user_service
from config.locales.locale_manager import get_global_locale_manager


def access_check(func: Callable) -> Callable:
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ö–µ–Ω–¥–ª–µ—Ä–∞–º –±–æ—Ç–∞.
    
    –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:
    1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞ (ADMIN_TELEGRAM_ID)
    2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é "user"
    3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ whitelist (–µ—Å–ª–∏ –µ—Å—Ç—å username)
    4. –û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ —Å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    
    Args:
        func: –§—É–Ω–∫—Ü–∏—è-—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
        
    Returns:
        –û–±–µ—Ä–Ω—É—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–∞
    """
    @functools.wraps(func)
    async def wrapper(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[Any]:
        """
        –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
        
        Args:
            self: –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞
            update: Telegram Update –æ–±—ä–µ–∫—Ç
            context: Telegram Context –æ–±—ä–µ–∫—Ç
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏–ª–∏ None –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ
        """
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not update.effective_user:
            print("‚ùå No user found in update")
            return None
            
        user = update.effective_user
        user_id = user.id
        username = user.username
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ —Å–µ—Ä–≤–∏—Å—ã
        config = BotConfig()
        user_service = get_user_service()
        locale_manager = get_global_locale_manager()
        
        print(f"üîç Checking access for user {user_id} (@{username})")
        
        # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
        if user_id == config.ADMIN_TELEGRAM_ID:
            print(f"‚úÖ User {user_id} is admin - access granted")
            return await func(self, update, context)
        
        # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é "user"
        has_user_role = await user_service.get_user_role(user_id)
        if has_user_role:
            print(f"‚úÖ User {user_id} has user role - access granted")
            return await func(self, update, context)
        
        # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ whitelist (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å username)
        if username:
            # –ü—Ä–∏–≤–æ–¥–∏–º username –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–±–∏—Ä–∞–µ–º @
            clean_username = username.lower().lstrip('@')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ whitelist
            is_whitelisted = await user_service.is_user_whitelisted(clean_username)
            
            if is_whitelisted:
                print(f"‚úÖ User {user_id} (@{username}) is whitelisted - granting access")
                
                # –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ users —Å —Ä–æ–ª—å—é "user"
                success = await user_service.set_user_role(user_id, "user")
                if success:
                    print(f"‚úÖ User {user_id} added to users collection with role 'user'")
                else:
                    print(f"‚ùå Failed to add user {user_id} to users collection")
                
                # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ whitelist
                remove_success = await user_service.remove_from_whitelist(clean_username)
                if remove_success:
                    print(f"‚úÖ User @{username} removed from whitelist")
                else:
                    print(f"‚ùå Failed to remove user @{username} from whitelist")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                return await func(self, update, context)
        
        # –®–∞–≥ 4: –û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ
        print(f"‚ùå Access denied for user {user_id} (@{username})")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ
        try:
            # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            user_language = locale_manager.get_language_from_context(context, update)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ
            access_denied_message = locale_manager.get_text(
                "access_control.access_denied",
                context=context,
                language=user_language,
                update=update
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await update.message.reply_text(access_denied_message)
            
        except Exception as e:
            print(f"‚ùå Error sending access denied message: {e}")
            
            # Fallback —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
            fallback_message = (
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @markov1u"
            )
            await update.message.reply_text(fallback_message)
        
        return None
    
    return wrapper


def admin_only(func: Callable) -> Callable:
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
    
    Args:
        func: –§—É–Ω–∫—Ü–∏—è-—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
        
    Returns:
        –û–±–µ—Ä–Ω—É—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
    """
    @functools.wraps(func)
    async def wrapper(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[Any]:
        """
        –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
        
        Args:
            self: –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞
            update: Telegram Update –æ–±—ä–µ–∫—Ç
            context: Telegram Context –æ–±—ä–µ–∫—Ç
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏–ª–∏ None –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ
        """
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not update.effective_user:
            print("‚ùå No user found in update")
            return None
            
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = BotConfig()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if user_id != config.ADMIN_TELEGRAM_ID:
            print(f"‚ùå User {user_id} is not admin - access denied")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ
            try:
                locale_manager = get_global_locale_manager()
                user_language = locale_manager.get_language_from_context(context, update)
                
                admin_only_message = locale_manager.get_text(
                    "access_control.admin_only",
                    context=context,
                    language=user_language,
                    update=update
                )
                
                await update.message.reply_text(admin_only_message)
                
            except Exception as e:
                print(f"‚ùå Error sending admin only message: {e}")
                
                # Fallback —Å–æ–æ–±—â–µ–Ω–∏–µ
                fallback_message = "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                await update.message.reply_text(fallback_message)
            
            return None
        
        print(f"‚úÖ User {user_id} is admin - access granted")
        return await func(self, update, context)
    
    return wrapper
