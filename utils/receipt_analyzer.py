"""
–ú–æ–¥—É–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ–∫–æ–≤ –∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤.

–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è
–æ–±–ª–∞—Å—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç.

–í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç OpenCV –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ!
–î–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ utils/receipt_analyzer_optimized.py
"""

# –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ OpenCV - –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
_cv2 = None

def _get_cv2():
    """–ü–æ–ª—É—á–∞–µ—Ç OpenCV –º–æ–¥—É–ª—å —Å –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π"""
    global _cv2
    if _cv2 is None:
        try:
            import cv2
            _cv2 = cv2
            print("üîç OpenCV –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        except ImportError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ OpenCV: {e}")
            raise
    return _cv2

def unload_opencv():
    """–í—ã–≥—Ä—É–∂–∞–µ—Ç OpenCV –∏–∑ –ø–∞–º—è—Ç–∏ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤"""
    global _cv2
    if _cv2 is not None:
        try:
            print("üßπ –í—ã–≥—Ä—É–∂–∞–µ–º OpenCV –∏–∑ –ø–∞–º—è—Ç–∏...")
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à OpenCV (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
            try:
                if hasattr(_cv2, 'destroyAllWindows'):
                    _cv2.destroyAllWindows()
            except Exception:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ destroyAllWindows (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
                pass
            
            # –û—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            _cv2 = None
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
            import gc
            gc.collect()
            
            print("‚úÖ OpenCV –≤—ã–≥—Ä—É–∂–µ–Ω –∏–∑ –ø–∞–º—è—Ç–∏")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ OpenCV: {e}")
            # –ù–µ –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ - —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ

import numpy as np
from typing import List, Tuple, Dict
import asyncio
import math
from skimage.feature import local_binary_pattern
from scipy.stats import entropy


async def find_text_regions(image_bytes: bytes) -> List[Tuple[int, int, int, int]]:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.
    
    Args:
        image_bytes: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤–∏–¥–µ –±–∞–π—Ç–æ–≤
        
    Returns:
        –°–ø–∏—Å–æ–∫ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ (x, y, w, h)
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º OpenCV —Å –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
        cv2 = _get_cv2()
        
        # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –±–∞–π—Ç–æ–≤
        nparr = np.frombuffer(image_bytes, np.uint8)
        image = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
        
        if image is None:
            return []
        
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        height, width = image.shape[:2]
        max_width = 1000
        
        if width > max_width:
            scale = max_width / width
            new_width = max_width
            new_height = int(height * scale)
            image = cv2.resize(image, (new_width, new_height), interpolation=cv2.INTER_AREA)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –æ—Ç—Ç–µ–Ω–∫–∏ —Å–µ—Ä–æ–≥–æ
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞–∑–º—ã—Ç–∏–µ –ø–æ –ì–∞—É—Å—Å—É –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —à—É–º–∞
        blurred = cv2.GaussianBlur(gray, (3, 3), 0)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º MSER –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
        mser = cv2.MSER_create(
            min_area=20,      # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å —Ä–µ–≥–∏–æ–Ω–∞
            max_area=10000,   # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å —Ä–µ–≥–∏–æ–Ω–∞
            max_variation=0.25,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è
            min_diversity=0.2,   # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ
            max_evolution=200,   # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ç–≤–æ–ª—é—Ü–∏—è
            area_threshold=1.01, # –ü–æ—Ä–æ–≥ –ø–ª–æ—â–∞–¥–∏
            min_margin=0.003,    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø
            edge_blur_size=5     # –†–∞–∑–º–µ—Ä —Ä–∞–∑–º—ã—Ç–∏—è –∫—Ä–∞–µ–≤
        )
        
        # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–æ–≤
        regions, _ = mser.detectRegions(blurred)
        
        if not regions:
            return []
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤ –ø–æ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º
        filtered_regions = []
        for region in regions:
            # –ü–æ–ª—É—á–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
            x, y, w, h = cv2.boundingRect(region)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É
            if w < 5 or h < 5 or w > 200 or h > 200:
                continue
                
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—é —Å—Ç–æ—Ä–æ–Ω (–∏—Å–∫–ª—é—á–∞–µ–º —Å–ª–∏—à–∫–æ–º –≤—ã—Ç—è–Ω—É—Ç—ã–µ)
            aspect_ratio = w / h
            if aspect_ratio < 0.1 or aspect_ratio > 10:
                continue
                
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–ª–æ—â–∞–¥–∏
            area = w * h
            if area < 25 or area > 20000:
                continue
                
            filtered_regions.append((x, y, w, h))
        
        if not filtered_regions:
            return []
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –±–ª–∏–∑–∫–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ –≤ —Å—Ç—Ä–æ–∫–∏
        text_regions = _group_regions_into_lines(filtered_regions)
        
        return text_regions
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return []


def _group_regions_into_lines(regions: List[Tuple[int, int, int, int]]) -> List[Tuple[int, int, int, int]]:
    """
    –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –±–ª–∏–∑–∫–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã –≤ —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞.
    
    Args:
        regions: –°–ø–∏—Å–æ–∫ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ —Ä–µ–≥–∏–æ–Ω–æ–≤
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤
    """
    if not regions:
        return []
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–≥–∏–æ–Ω—ã –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
    regions.sort(key=lambda r: r[1])
    
    lines = []
    current_line = [regions[0]]
    
    for i in range(1, len(regions)):
        current_region = regions[i]
        last_region = current_line[-1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–≥–∏–æ–Ω –∫ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–µ
        # –†–µ–≥–∏–æ–Ω—ã —Å—á–∏—Ç–∞—é—Ç—Å—è –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, –µ—Å–ª–∏ –∏—Ö –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã –±–ª–∏–∑–∫–∏
        current_center_y = current_region[1] + current_region[3] // 2
        last_center_y = last_region[1] + last_region[3] // 2
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É
        max_vertical_distance = max(current_region[3], last_region[3]) * 0.5
        
        if abs(current_center_y - last_center_y) <= max_vertical_distance:
            current_line.append(current_region)
        else:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
            lines.append(_merge_regions_in_line(current_line))
            current_line = [current_region]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É
    if current_line:
        lines.append(_merge_regions_in_line(current_line))
    
    return lines


def _merge_regions_in_line(regions: List[Tuple[int, int, int, int]]) -> Tuple[int, int, int, int]:
    """
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ä–µ–≥–∏–æ–Ω—ã –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –≤ –æ–¥–∏–Ω –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫.
    
    Args:
        regions: –°–ø–∏—Å–æ–∫ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        
    Returns:
        –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
    """
    if not regions:
        return (0, 0, 0, 0)
    
    if len(regions) == 1:
        return regions[0]
    
    # –ù–∞—Ö–æ–¥–∏–º –≥—Ä–∞–Ω–∏—Ü—ã –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
    min_x = min(r[0] for r in regions)
    min_y = min(r[1] for r in regions)
    max_x = max(r[0] + r[2] for r in regions)
    max_y = max(r[1] + r[3] for r in regions)
    
    return (min_x, min_y, max_x - min_x, max_y - min_y)


def straighten_receipt(image: np.ndarray) -> np.ndarray:
    """
    –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ–∫–∞, –∏—Å–ø—Ä–∞–≤–ª—è—è –Ω–∞–∫–ª–æ–Ω.
    
    Args:
        image: –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        
    Returns:
        –í—ã—Ä–æ–≤–Ω–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º OpenCV —Å –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
        cv2 = _get_cv2()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ—Ç—Ç–µ–Ω–∫–∏ —Å–µ—Ä–æ–≥–æ
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞–∑–º—ã—Ç–∏–µ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —à—É–º–∞
        blurred = cv2.GaussianBlur(gray, (5, 5), 0)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä –∫—Ä–∞–µ–≤ Canny
        edges = cv2.Canny(blurred, 50, 150, apertureSize=3)
        
        # –ù–∞—Ö–æ–¥–∏–º –ª–∏–Ω–∏–∏ —Å –ø–æ–º–æ—â—å—é –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –•–∞—Ñ–∞
        lines = cv2.HoughLines(edges, 1, np.pi/180, threshold=100)
        
        if lines is None or len(lines) == 0:
            return image
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —É–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞
        angles = []
        for line in lines:
            rho, theta = line[0]
            angle = theta * 180 / np.pi
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —É–≥–æ–ª –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É [-45, 45]
            if angle > 45:
                angle -= 90
            elif angle < -45:
                angle += 90
            angles.append(angle)
        
        if not angles:
            return image
        
        # –í—ã—á–∏—Å–ª—è–µ–º –º–µ–¥–∏–∞–Ω–Ω—ã–π —É–≥–æ–ª –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∫ –≤—ã–±—Ä–æ—Å–∞–º
        median_angle = np.median(angles)
        
        # –ï—Å–ª–∏ —É–≥–æ–ª –Ω–µ–±–æ–ª—å—à–æ–π, –Ω–µ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
        if abs(median_angle) < 1:
            return image
        
        # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        height, width = image.shape[:2]
        center = (width // 2, height // 2)
        rotation_matrix = cv2.getRotationMatrix2D(center, median_angle, 1.0)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        cos_angle = abs(rotation_matrix[0, 0])
        sin_angle = abs(rotation_matrix[0, 1])
        new_width = int((height * sin_angle) + (width * cos_angle))
        new_height = int((height * cos_angle) + (width * sin_angle))
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –º–∞—Ç—Ä–∏—Ü—É –ø–æ–≤–æ—Ä–æ—Ç–∞ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        rotation_matrix[0, 2] += (new_width / 2) - center[0]
        rotation_matrix[1, 2] += (new_height / 2) - center[1]
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–≤–æ—Ä–æ—Ç
        straightened = cv2.warpAffine(image, rotation_matrix, (new_width, new_height), 
                                    flags=cv2.INTER_CUBIC, borderMode=cv2.BORDER_REPLICATE)
        
        return straightened
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return image


def find_character_contours(image: np.ndarray) -> List[Dict]:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –∫–æ–Ω—Ç—É—Ä—ã –≤—Å–µ—Ö –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.
    
    Args:
        image: –í—ã—Ä–æ–≤–Ω–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ—Ç—Ç–µ–Ω–∫–∞—Ö —Å–µ—Ä–æ–≥–æ
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∏–º–≤–æ–ª–∞—Ö: {'contour', 'x', 'y', 'w', 'h', 'angle'}
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º OpenCV —Å –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
        cv2 = _get_cv2()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—é
        binary = cv2.adaptiveThreshold(
            image, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY_INV, 11, 2
        )
        
        # –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        kernel_small = cv2.getStructuringElement(cv2.MORPH_RECT, (2, 2))
        kernel_medium = cv2.getStructuringElement(cv2.MORPH_RECT, (3, 3))
        
        # –£–¥–∞–ª—è–µ–º –º–µ–ª–∫–∏–π —à—É–º
        binary = cv2.morphologyEx(binary, cv2.MORPH_OPEN, kernel_small)
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ä–∞–∑—Ä—ã–≤—ã –≤ —Å–∏–º–≤–æ–ª–∞—Ö
        binary = cv2.morphologyEx(binary, cv2.MORPH_CLOSE, kernel_medium)
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç—É—Ä—ã
        contours, _ = cv2.findContours(binary, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        
        characters = []
        for contour in contours:
            # –ü–æ–ª—É—á–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
            x, y, w, h = cv2.boundingRect(contour)
            
            # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ —Ä–∞–∑–º–µ—Ä—É
            if w < 8 or h < 8 or w > 80 or h > 80:
                continue
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—é —Å—Ç–æ—Ä–æ–Ω (–∏—Å–∫–ª—é—á–∞–µ–º —Å–ª–∏—à–∫–æ–º –≤—ã—Ç—è–Ω—É—Ç—ã–µ)
            aspect_ratio = w / h
            if aspect_ratio < 0.2 or aspect_ratio > 5:
                continue
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–ª–æ—â–∞–¥–∏
            area = cv2.contourArea(contour)
            if area < 50 or area > 2000:
                continue
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏ (–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–∏ –∫–æ–Ω—Ç—É—Ä–∞ –∫ –ø–ª–æ—â–∞–¥–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞)
            rect_area = w * h
            compactness = area / rect_area if rect_area > 0 else 0
            if compactness < 0.3:  # –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª–∏—à–∫–æ–º "–¥—ã—Ä—è–≤—ã–µ" –æ–±—ä–µ–∫—Ç—ã
                continue
            
            # –í—ã—á–∏—Å–ª—è–µ–º —É–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞ —Å–∏–º–≤–æ–ª–∞
            if len(contour) >= 5:
                try:
                    ellipse = cv2.fitEllipse(contour)
                    angle = ellipse[2]
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —É–≥–æ–ª –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É [-90, 90]
                    if angle > 90:
                        angle -= 180
                    elif angle < -90:
                        angle += 180
                except:
                    angle = 0
            else:
                angle = 0
            
            characters.append({
                'contour': contour,
                'x': x,
                'y': y,
                'w': w,
                'h': h,
                'angle': angle,
                'center_y': y + h // 2
            })
        
        return characters
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ–Ω—Ç—É—Ä–æ–≤ —Å–∏–º–≤–æ–ª–æ–≤: {e}")
        return []


def group_characters_into_lines(characters: List[Dict]) -> List[List[Dict]]:
    """
    –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Å–∏–º–≤–æ–ª—ã –≤ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö Y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.
    
    Args:
        characters: –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ —Å –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫, –≥–¥–µ –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ - —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤
    """
    if not characters:
        return []
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã –ø–æ Y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–µ
    characters.sort(key=lambda c: c['center_y'])
    
    lines = []
    current_line = [characters[0]]
    
    for i in range(1, len(characters)):
        current_char = characters[i]
        last_char = current_line[-1]
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏
        vertical_distance = abs(current_char['center_y'] - last_char['center_y'])
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –≤—ã—Å–æ—Ç—É —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–µ
        avg_height = np.mean([char['h'] for char in current_line])
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É (50% –æ—Ç —Å—Ä–µ–¥–Ω–µ–π –≤—ã—Å–æ—Ç—ã)
        max_distance = avg_height * 0.5
        
        if vertical_distance <= max_distance:
            current_line.append(current_char)
        else:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
            lines.append(current_line)
            current_line = [current_char]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É
    if current_line:
        lines.append(current_line)
    
    return lines


def calculate_chaos_index(line_characters: List[Dict]) -> float:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –∏–Ω–¥–µ–∫—Å —Ö–∞–æ—Å–∞ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ —Å–∏–º–≤–æ–ª–æ–≤.
    
    Args:
        line_characters: –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ
        
    Returns:
        –ò–Ω–¥–µ–∫—Å —Ö–∞–æ—Å–∞ (0-1, –≥–¥–µ 1 - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ö–∞–æ—Å)
    """
    if len(line_characters) < 2:
        return 0.0
    
    try:
        # –°–æ–±–∏—Ä–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–∏–º–≤–æ–ª–æ–≤
        heights = [char['h'] for char in line_characters]
        angles = [char['angle'] for char in line_characters]
        center_ys = [char['center_y'] for char in line_characters]
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        height_std = np.std(heights) if len(heights) > 1 else 0
        angle_std = np.std(angles) if len(angles) > 1 else 0
        center_y_std = np.std(center_ys) if len(center_ys) > 1 else 0
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        avg_height = np.mean(heights)
        height_chaos = height_std / avg_height if avg_height > 0 else 0
        
        # –£–≥–ª—ã –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ
        # –î–ª—è –ø–µ—á–∞—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —É–≥–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–ª–∏–∑–∫–∏ –∫ 0
        angle_chaos = min(angle_std / 15.0, 1.0)  # 15 –≥—Ä–∞–¥—É—Å–æ–≤ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–±—Ä–æ—Å –¥–ª—è –ø–µ—á–∞—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        
        # Y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ä–µ–¥–Ω–µ–π –≤—ã—Å–æ—Ç—ã
        center_y_chaos = center_y_std / avg_height if avg_height > 0 else 0
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –≤—Å–µ —É–≥–ª—ã –±–ª–∏–∑–∫–∏ –∫ 0, —ç—Ç–æ –ø–µ—á–∞—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç
        angle_variance = np.var(angles)
        if angle_variance < 25:  # –ï—Å–ª–∏ –¥–∏—Å–ø–µ—Ä—Å–∏—è —É–≥–ª–æ–≤ –º–∞–ª–∞
            angle_chaos *= 0.5  # –°–Ω–∏–∂–∞–µ–º –≤–∫–ª–∞–¥ —É–≥–ª–æ–≤
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å –≤–µ—Å–∞–º–∏
        chaos_index = (height_chaos * 0.3 + angle_chaos * 0.4 + center_y_chaos * 0.3)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–µ–ª–∏–Ω–µ–π–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –±–æ–ª–µ–µ —á–µ—Ç–∫–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        if chaos_index < 0.2:
            chaos_index *= 0.5  # –°–Ω–∏–∂–∞–µ–º –¥–ª—è –Ω–∏–∑–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        elif chaos_index > 0.6:
            chaos_index = 0.5 + (chaos_index - 0.6) * 1.25  # –£—Å–∏–ª–∏–≤–∞–µ–º –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        
        return min(chaos_index, 1.0)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º–æ–º 1.0
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞ —Ö–∞–æ—Å–∞: {e}")
        return 0.0


def find_table_region(text_regions: List[Tuple[int, int, int, int]], image_height: int, image_width: int) -> List[Tuple[int, int, int, int]]:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –æ–±–ª–∞—Å—Ç—å —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤, –∏—Å–∫–ª—é—á–∞—è –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –ø–æ–¥–ø–∏—Å–∏.
    
    Args:
        text_regions: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤
        image_height: –í—ã—Å–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_width: –®–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
    Returns:
        –°–ø–∏—Å–æ–∫ –±–ª–æ–∫–æ–≤, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏—Ö —Ç–∞–±–ª–∏—Ü–µ —Ç–æ–≤–∞—Ä–æ–≤
    """
    if not text_regions:
        return []
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –±–ª–æ–∫–∏ –ø–æ Y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–µ
    sorted_regions = sorted(text_regions, key=lambda r: r[1])
    
    # –ò—Å–∫–ª—é—á–∞–µ–º –≤–µ—Ä—Ö–Ω–∏–µ 20% –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∑–∞–≥–æ–ª–æ–≤–∫–∏, –∞–¥—Ä–µ—Å–∞) - –º–µ–Ω–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ
    header_threshold = int(image_height * 0.2)
    
    # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–∏–∂–Ω–∏–µ 15% –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–æ–¥–ø–∏—Å–∏, –∏—Ç–æ–≥–∏) - –º–µ–Ω–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ
    footer_threshold = int(image_height * 0.85)
    
    # –ò—Å–∫–ª—é—á–∞–µ–º –±–æ–∫–æ–≤—ã–µ –æ–±–ª–∞—Å—Ç–∏ (–º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ª–æ–≥–æ—Ç–∏–ø—ã, –Ω–æ–º–µ—Ä–∞) - –º–µ–Ω–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ
    side_margin = int(image_width * 0.05)
    
    table_regions = []
    for x, y, w, h in sorted_regions:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–ª–æ–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
        if (y > header_threshold and 
            y + h < footer_threshold and
            x > side_margin and 
            x + w < image_width - side_margin):
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä—É –±–ª–æ–∫–∞
            # –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–µ –∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ –±–ª–æ–∫–∏
            if (w > 20 and h > 10 and w < image_width * 0.8 and h < image_height * 0.3):
                table_regions.append((x, y, w, h))
    
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(table_regions)} –±–ª–æ–∫–æ–≤ –≤ –æ–±–ª–∞—Å—Ç–∏ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ {len(text_regions)} –æ–±—â–∏—Ö")
    return table_regions


async def analyze_receipt_and_choose_model(image_bytes: bytes) -> str:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ–∫–∞ –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â—É—é –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç—É—Ä—ã –±–ª–æ–∫–æ–≤ —Å –ø–æ–º–æ—â—å—é LBP (Local Binary Pattern).
    
    Args:
        image_bytes: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤–∏–¥–µ –±–∞–π—Ç–æ–≤
        
    Returns:
        'flash' –¥–ª—è –ø–µ—á–∞—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ 'pro' –¥–ª—è —Ä—É–∫–æ–ø–∏—Å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º OpenCV —Å –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
        cv2 = _get_cv2()
        
        # –®–∞–≥ 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ - –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        nparr = np.frombuffer(image_bytes, np.uint8)
        image = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
        
        if image is None:
            print("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å flash")
            return 'flash'
        
        # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        height, width = image.shape[:2]
        max_width = 1000
        
        if width > max_width:
            scale = max_width / width
            new_width = max_width
            new_height = int(height * scale)
            image = cv2.resize(image, (new_width, new_height), interpolation=cv2.INTER_AREA)
        
        # –®–∞–≥ 2: –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        print("üîç –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        straightened_image = straighten_receipt(image)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ—Ç—Ç–µ–Ω–∫–∏ —Å–µ—Ä–æ–≥–æ
        gray = cv2.cvtColor(straightened_image, cv2.COLOR_BGR2GRAY)
        
        # –®–∞–≥ 3: –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        print("üîç –ò—â–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏...")
        text_regions = await find_text_regions(image_bytes)
        
        if not text_regions:
            print("üîç –¢–µ–∫—Å—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å flash")
            return 'flash'
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(text_regions)} —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤")
        
        # –®–∞–≥ 4: –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±–ª–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤
        print("üîç –§–∏–ª—å—Ç—Ä—É–µ–º –±–ª–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤...")
        table_regions = find_table_region(text_regions, gray.shape[0], gray.shape[1])
        
        if not table_regions:
            print("üîç –ë–ª–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å flash")
            return 'flash'
        
        # –®–∞–≥ 5: –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—â–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
        
        total_blocks = len(table_regions)
        if total_blocks == 0:
            print("üîç –ë–ª–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å flash")
            return 'flash'
        
        # –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤
        block_metrics = []
        large_blocks = 0
        high_density_blocks = 0
        irregular_blocks = 0
        high_contrast_blocks = 0
        size_variance_blocks = 0
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –±–ª–æ–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
        block_areas = []
        
        for x, y, w, h in table_regions:
            area = w * h
            block_areas.append(area)
            
            # –ë–ª–æ–∫ —Å—á–∏—Ç–∞–µ—Ç—Å—è –±–æ–ª—å—à–∏–º, –µ—Å–ª–∏ –µ–≥–æ –ø–ª–æ—â–∞–¥—å –±–æ–ª—å—à–µ 2000 –ø–∏–∫—Å–µ–ª–µ–π
            if area > 2000:
                large_blocks += 1
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –±–ª–æ–∫–∞
            block_roi = gray[y:y+h, x:x+w]
            binary = cv2.adaptiveThreshold(block_roi, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY_INV, 11, 2)
            black_pixels = np.sum(binary > 0)
            total_pixels = binary.size
            density = black_pixels / total_pixels if total_pixels > 0 else 0
            
            # –ë–ª–æ–∫ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–ª–æ—Ç–Ω—ã–º, –µ—Å–ª–∏ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å > 0.3
            if density > 0.3:
                high_density_blocks += 1
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ—Ä–æ–≤–Ω–æ—Å—Ç—å –∫—Ä–∞–µ–≤
            edges = cv2.Canny(block_roi, 50, 150)
            edge_density = np.sum(edges > 0) / edges.size if edges.size > 0 else 0
            
            # –ë–ª–æ–∫ —Å—á–∏—Ç–∞–µ—Ç—Å—è –Ω–µ—Ä–æ–≤–Ω—ã–º, –µ—Å–ª–∏ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –∫—Ä–∞–µ–≤ > 0.1
            if edge_density > 0.1:
                irregular_blocks += 1
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç –±–ª–æ–∫–∞
            mean_intensity = np.mean(block_roi)
            std_intensity = np.std(block_roi)
            contrast = std_intensity / (mean_intensity + 1e-6)  # –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
            
            # –ë–ª–æ–∫ —Å—á–∏—Ç–∞–µ—Ç—Å—è –≤—ã—Å–æ–∫–æ–∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–º, –µ—Å–ª–∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç > 0.3
            if contrast > 0.3:
                high_contrast_blocks += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –±–ª–æ–∫–∞
            block_metrics.append({
                'area': area,
                'density': density,
                'edge_density': edge_density,
                'contrast': contrast,
                'w': w,
                'h': h
            })
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–∑–º–µ—Ä–æ–≤ –±–ª–æ–∫–æ–≤
        if len(block_areas) > 1:
            area_std = np.std(block_areas)
            area_mean = np.mean(block_areas)
            area_cv = area_std / (area_mean + 1e-6)  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏
            
            # –ï—Å–ª–∏ –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–∑–º–µ—Ä–æ–≤ –≤—ã—Å–æ–∫–∞—è (> 0.5), —ç—Ç–æ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Ä—É–∫–æ–ø–∏—Å–Ω—ã–π —Ç–µ–∫—Å—Ç
            if area_cv > 0.5:
                size_variance_blocks = total_blocks
        else:
            area_cv = 0
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è
        large_blocks_ratio = large_blocks / total_blocks
        high_density_ratio = high_density_blocks / total_blocks
        irregular_ratio = irregular_blocks / total_blocks
        high_contrast_ratio = high_contrast_blocks / total_blocks
        size_variance_ratio = size_variance_blocks / total_blocks
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥: –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –º—è–≥–∫–∏–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏
        
        # –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤
        density_scores = []
        contrast_scores = []
        irregular_scores = []
        
        for x, y, w, h in table_regions:
            block_roi = gray[y:y+h, x:x+w]
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –±–ª–æ–∫–∞
            binary = cv2.adaptiveThreshold(block_roi, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY_INV, 11, 2)
            black_pixels = np.sum(binary > 0)
            total_pixels = binary.size
            density = black_pixels / total_pixels if total_pixels > 0 else 0
            density_scores.append(density)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç –±–ª–æ–∫–∞
            mean_intensity = np.mean(block_roi)
            std_intensity = np.std(block_roi)
            contrast = std_intensity / (mean_intensity + 1e-6)
            contrast_scores.append(contrast)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ—Ä–æ–≤–Ω–æ—Å—Ç—å –∫—Ä–∞–µ–≤
            edges = cv2.Canny(block_roi, 50, 150)
            edge_density = np.sum(edges > 0) / edges.size if edges.size > 0 else 0
            irregular_scores.append(edge_density)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        avg_density = np.mean(density_scores)
        avg_contrast = np.mean(contrast_scores)
        avg_irregular = np.mean(irregular_scores)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –±–ª–æ–∫–∏ —Å –≤—ã—Å–æ–∫–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ (–º—è–≥–∫–∏–µ –ø–æ—Ä–æ–≥–∏)
        high_density_count = sum(1 for d in density_scores if d > 0.25)
        high_contrast_count = sum(1 for c in contrast_scores if c > 0.3)
        high_irregular_count = sum(1 for i in irregular_scores if i > 0.05)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è
        density_ratio = high_density_count / total_blocks
        contrast_ratio = high_contrast_count / total_blocks
        irregular_ratio = high_irregular_count / total_blocks
        
        # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π score —Å –≤–µ—Å–∞–º–∏
        handwritten_score = (
            density_ratio * 0.4 +      # –ü–ª–æ—Ç–Ω–æ—Å—Ç—å - –≥–ª–∞–≤–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            contrast_ratio * 0.3 +     # –ö–æ–Ω—Ç—Ä–∞—Å—Ç
            irregular_ratio * 0.3      # –ù–µ—Ä–æ–≤–Ω–æ—Å—Ç—å
        )
        
        print(f"üîç –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {total_blocks} –±–ª–æ–∫–æ–≤")
        print(f"   –ü–ª–æ—Ç–Ω—ã—Ö (>0.25): {density_ratio:.2f}, –í—ã—Å–æ–∫–æ–∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã—Ö (>0.3): {contrast_ratio:.2f}")
        print(f"   –ù–µ—Ä–æ–≤–Ω—ã—Ö (>0.05): {irregular_ratio:.2f}")
        print(f"   –ò—Ç–æ–≥–æ–≤—ã–π score: {handwritten_score:.2f}")
        
        # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –º–µ–∂–¥—É —Ç–æ—á–Ω–æ—Å—Ç—å—é –∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
        HANDWRITTEN_THRESHOLD = 0.35
        
        # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        if handwritten_score > HANDWRITTEN_THRESHOLD:
            print("‚úçÔ∏è –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å PRO (—Ä—É–∫–æ–ø–∏—Å–Ω—ã–π —Ç–µ–∫—Å—Ç)")
            return 'pro'
        else:
            print("üñ®Ô∏è –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å FLASH (–ø–µ—á–∞—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç)")
            return 'flash'
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —á–µ–∫–∞: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –º–æ—â–Ω—É—é –º–æ–¥–µ–ª—å
        return 'pro'


def _analyze_text_density(binary_roi: np.ndarray) -> float:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–ª–æ—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –≤ –±–∏–Ω–∞—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–º ROI.
    
    Args:
        binary_roi: –ë–∏–Ω–∞—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ROI
        
    Returns:
        –ü–ª–æ—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ (–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —á–µ—Ä–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π –∫ –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É)
    """
    total_pixels = binary_roi.size
    black_pixels = np.sum(binary_roi == 0)  # –ß–µ—Ä–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏ (—Ç–µ–∫—Å—Ç)
    
    return black_pixels / total_pixels if total_pixels > 0 else 0


def _analyze_line_variation(binary_roi: np.ndarray) -> float:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–æ–ª—â–∏–Ω—ã –ª–∏–Ω–∏–π –≤ ROI.
    
    Args:
        binary_roi: –ë–∏–Ω–∞—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ROI
        
    Returns:
        –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏ —Ç–æ–ª—â–∏–Ω—ã –ª–∏–Ω–∏–π
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º OpenCV —Å –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
        cv2 = _get_cv2()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–ª—â–∏–Ω—ã –ª–∏–Ω–∏–π
        kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (3, 3))
        
        # –≠—Ä–æ–∑–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–Ω–∫–∏—Ö –ª–∏–Ω–∏–π
        eroded = cv2.erode(binary_roi, kernel, iterations=1)
        
        # –î–∏–ª–∞—Ç–∞—Ü–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        dilated = cv2.dilate(eroded, kernel, iterations=1)
        
        # –†–∞–∑–Ω–æ—Å—Ç—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–æ–ª—â–∏–Ω—ã
        difference = cv2.absdiff(binary_roi, dilated)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏
        diff_pixels = np.sum(difference > 0)
        total_pixels = binary_roi.size
        
        return diff_pixels / total_pixels if total_pixels > 0 else 0
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—Ä–∏–∞—Ü–∏–∏ –ª–∏–Ω–∏–π: {e}")
        return 0


def _is_handwritten_block(text_density: float, line_variation: float) -> bool:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫ —Ä—É–∫–æ–ø–∏—Å–Ω—ã–º.
    
    Args:
        text_density: –ü–ª–æ—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
        line_variation: –í–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–æ–ª—â–∏–Ω—ã –ª–∏–Ω–∏–π
        
    Returns:
        True –µ—Å–ª–∏ –±–ª–æ–∫ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ä—É–∫–æ–ø–∏—Å–Ω—ã–º
    """
    # –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä—É–∫–æ–ø–∏—Å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    density_threshold = 0.35  # –í—ã—Å–æ–∫–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
    variation_threshold = 0.15  # –í—ã—Å–æ–∫–∞—è –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–æ–ª—â–∏–Ω—ã
    
    # –ë–ª–æ–∫ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ä—É–∫–æ–ø–∏—Å–Ω—ã–º, –µ—Å–ª–∏:
    # 1. –í—ã—Å–æ–∫–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –ò–õ–ò
    # 2. –í—ã—Å–æ–∫–∞—è –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–æ–ª—â–∏–Ω—ã –ª–∏–Ω–∏–π
    return (text_density > density_threshold or 
            line_variation > variation_threshold)


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
def _analyze_size_variance(block_roi: np.ndarray) -> float:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—Ä–∏–∞—Ü–∏—é —Ä–∞–∑–º–µ—Ä–æ–≤ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –±–ª–æ–∫–µ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º OpenCV —Å –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
        cv2 = _get_cv2()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤
        kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (3, 3))
        binary = cv2.adaptiveThreshold(block_roi, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY_INV, 11, 2)
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç—É—Ä—ã
        contours, _ = cv2.findContours(binary, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        
        if len(contours) < 2:
            return 0.0
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–ª–æ—â–∞–¥–∏ –∫–æ–Ω—Ç—É—Ä–æ–≤
        areas = [cv2.contourArea(contour) for contour in contours if cv2.contourArea(contour) > 10]
        
        if len(areas) < 2:
            return 0.0
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏
        mean_area = np.mean(areas)
        std_area = np.std(areas)
        cv = std_area / mean_area if mean_area > 0 else 0
        
        return min(cv, 1.0)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ [0, 1]
    except:
        return 0.0


def _analyze_angle_variance(block_roi: np.ndarray) -> float:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—Ä–∏–∞—Ü–∏—é —É–≥–ª–æ–≤ –Ω–∞–∫–ª–æ–Ω–∞ –≤ –±–ª–æ–∫–µ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º OpenCV —Å –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
        cv2 = _get_cv2()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä –∫—Ä–∞–µ–≤
        edges = cv2.Canny(block_roi, 50, 150)
        
        # –ù–∞—Ö–æ–¥–∏–º –ª–∏–Ω–∏–∏
        lines = cv2.HoughLines(edges, 1, np.pi/180, threshold=30)
        
        if lines is None or len(lines) < 2:
            return 0.0
        
        # –í—ã—á–∏—Å–ª—è–µ–º —É–≥–ª—ã
        angles = []
        for line in lines:
            rho, theta = line[0]
            angle = theta * 180 / np.pi
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —É–≥–æ–ª –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É [-90, 90]
            if angle > 90:
                angle -= 180
            elif angle < -90:
                angle += 180
            angles.append(angle)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —É–≥–ª–æ–≤
        angle_std = np.std(angles)
        normalized_std = min(angle_std / 45.0, 1.0)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ [0, 1]
        
        return normalized_std
    except:
        return 0.0


def _analyze_density_variance(block_roi: np.ndarray) -> float:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—Ä–∏–∞—Ü–∏—é –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞ –≤ –±–ª–æ–∫–µ"""
    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º –±–ª–æ–∫ –Ω–∞ –Ω–µ–±–æ–ª—å—à–∏–µ –æ–±–ª–∞—Å—Ç–∏
        h, w = block_roi.shape
        region_h, region_w = h // 4, w // 4
        
        if region_h < 2 or region_w < 2:
            return 0.0
        
        densities = []
        for i in range(0, h - region_h, region_h):
            for j in range(0, w - region_w, region_w):
                region = block_roi[i:i+region_h, j:j+region_w]
                # –í—ã—á–∏—Å–ª—è–µ–º –ø–ª–æ—Ç–Ω–æ—Å—Ç—å —á–µ—Ä–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π
                density = np.sum(region < 128) / region.size
                densities.append(density)
        
        if len(densities) < 2:
            return 0.0
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏
        mean_density = np.mean(densities)
        std_density = np.std(densities)
        cv = std_density / mean_density if mean_density > 0 else 0
        
        return min(cv, 1.0)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ [0, 1]
    except:
        return 0.0


def _analyze_contrast_variance(block_roi: np.ndarray) -> float:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—Ä–∏–∞—Ü–∏—é –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ –≤ –±–ª–æ–∫–µ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º OpenCV —Å –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
        cv2 = _get_cv2()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç
        kernel = np.array([[-1, -1, -1], [-1, 8, -1], [-1, -1, -1]])
        contrast = cv2.filter2D(block_roi.astype(np.float32), -1, kernel)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤–∞—Ä–∏–∞—Ü–∏—é –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
        contrast_std = np.std(contrast)
        normalized_std = min(contrast_std / 100.0, 1.0)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ [0, 1]
        
        return normalized_std
    except:
        return 0.0


def visualize_text_regions(image_bytes: bytes, regions: List[Tuple[int, int, int, int]]) -> bytes:
    """
    –°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤.
    
    Args:
        image_bytes: –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∞–π—Ç–∞—Ö
        regions: –°–ø–∏—Å–æ–∫ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
        
    Returns:
        –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ—Ç–º–µ—á–µ–Ω–Ω—ã–º–∏ —Ä–µ–≥–∏–æ–Ω–∞–º–∏ –≤ –±–∞–π—Ç–∞—Ö
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º OpenCV —Å –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
        cv2 = _get_cv2()
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        nparr = np.frombuffer(image_bytes, np.uint8)
        image = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
        
        if image is None:
            return b''
        
        # –†–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ –≤–æ–∫—Ä—É–≥ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
        for x, y, w, h in regions:
            cv2.rectangle(image, (x, y), (x + w, y + h), (0, 255, 0), 2)
        
        # –ö–æ–¥–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –±–∞–π—Ç—ã
        _, encoded_img = cv2.imencode('.jpg', image)
        return encoded_img.tobytes()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return b''
