#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ OpenCV - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–µ–Ω–∏–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É –∏ –≤—ã–≥—Ä—É–∑–∫—É
"""
import time
import psutil
import os
import sys

def get_memory_usage():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ MB"""
    process = psutil.Process(os.getpid())
    return process.memory_info().rss / 1024 / 1024

def test_opencv_loading():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É OpenCV"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ OpenCV...")
    
    # –ò–∑–º–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å –¥–æ –∏–º–ø–æ—Ä—Ç–∞
    memory_before = get_memory_usage()
    print(f"üìä –ü–∞–º—è—Ç—å –¥–æ –∏–º–ø–æ—Ä—Ç–∞: {memory_before:.2f} MB")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
    print("üì¶ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏...")
    from utils.opencv_lazy_loader import check_opencv_availability, get_opencv, unload_opencv
    from utils.receipt_analyzer_optimized import analyze_receipt_and_choose_model
    
    memory_after_import = get_memory_usage()
    print(f"üìä –ü–∞–º—è—Ç—å –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞: {memory_after_import:.2f} MB")
    print(f"üìà –ü—Ä–∏—Ä–æ—Å—Ç –ø–∞–º—è—Ç–∏: {memory_after_import - memory_before:.2f} MB")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å OpenCV
    opencv_available = check_opencv_availability()
    print(f"üîç OpenCV –¥–æ—Å—Ç—É–ø–µ–Ω: {opencv_available}")
    
    if not opencv_available:
        print("‚ùå OpenCV –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ç–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–µ–Ω–∏–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–µ–Ω–∏–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É OpenCV...")
    memory_before_cv2 = get_memory_usage()
    
    cv2 = get_opencv()
    memory_after_cv2 = get_memory_usage()
    print(f"üìä –ü–∞–º—è—Ç—å –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ OpenCV: {memory_after_cv2:.2f} MB")
    print(f"üìà –ü—Ä–∏—Ä–æ—Å—Ç –ø–∞–º—è—Ç–∏ OpenCV: {memory_after_cv2 - memory_before_cv2:.2f} MB")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–≥—Ä—É–∑–∫—É
    print("üßπ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–≥—Ä—É–∑–∫—É OpenCV...")
    unload_opencv()
    memory_after_unload = get_memory_usage()
    print(f"üìä –ü–∞–º—è—Ç—å –ø–æ—Å–ª–µ –≤—ã–≥—Ä—É–∑–∫–∏: {memory_after_unload:.2f} MB")
    print(f"üìâ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –ø–∞–º—è—Ç–∏: {memory_after_cv2 - memory_after_unload:.2f} MB")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
    print("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É...")
    cv2_again = get_opencv()
    memory_after_reload = get_memory_usage()
    print(f"üìä –ü–∞–º—è—Ç—å –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏: {memory_after_reload:.2f} MB")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –≤—ã–≥—Ä—É–∑–∫–∞
    unload_opencv()
    memory_final = get_memory_usage()
    print(f"üìä –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å: {memory_final:.2f} MB")
    
    print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

def test_analyze_function():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    import numpy as np
    from PIL import Image, ImageDraw, ImageFont
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    img = Image.new('RGB', (800, 600), color='white')
    draw = ImageDraw.Draw(img)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç
        font = ImageFont.truetype("arial.ttf", 20)
    except:
        # Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç
        font = ImageFont.load_default()
    
    draw.text((50, 50), "Test Receipt", fill='black', font=font)
    draw.text((50, 100), "Item 1: $10.00", fill='black', font=font)
    draw.text((50, 150), "Item 2: $15.50", fill='black', font=font)
    draw.text((50, 200), "Total: $25.50", fill='black', font=font)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –±–∞–π—Ç—ã
    import io
    img_bytes = io.BytesIO()
    img.save(img_bytes, format='JPEG')
    image_bytes = img_bytes.getvalue()
    
    print(f"üì∑ –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {len(image_bytes)} –±–∞–π—Ç")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑
    memory_before = get_memory_usage()
    print(f"üìä –ü–∞–º—è—Ç—å –¥–æ –∞–Ω–∞–ª–∏–∑–∞: {memory_before:.2f} MB")
    
    try:
        import asyncio
        from utils.receipt_analyzer_optimized import analyze_receipt_and_choose_model
        result = asyncio.run(analyze_receipt_and_choose_model(image_bytes))
        print(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: {result}")
        
        memory_after = get_memory_usage()
        print(f"üìä –ü–∞–º—è—Ç—å –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞: {memory_after:.2f} MB")
        print(f"üìà –ü—Ä–∏—Ä–æ—Å—Ç –ø–∞–º—è—Ç–∏: {memory_after - memory_before:.2f} MB")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
    
    print("‚úÖ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ OpenCV...")
    
    try:
        test_opencv_loading()
        test_analyze_function()
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("   - OpenCV –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏")
        print("   - –ü–∞–º—è—Ç—å –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
        print("   - –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å Gemini –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å—Ç—Ä–∞–¥–∞—Ç—å")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()
